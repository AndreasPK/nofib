
Jules's Strictness Analyser, version 0.400
Copyright (c) Julian Seward 1992
Read 9 lattice sizes.


=============
=== Input ===
=============

list a ::= Nil  |
           Cons a (list a);


pair a b ::= Pair a b;


tp3 a b c ::= Tp3 a b c;


tp4 a b c d ::= Tp4 a b c d;


la a ::= Na  |
         Ca a (lb a);


lb b ::= Nb  |
         Cb b (la b);


complex a b ::= Cpx a b;


boxed a ::= Box a;


numD b u ::= NumDict b b u;


triple a b c ::= MkTriple a b c;


tree a ::= Leaf  |
           Branch (tree a) a (tree a);


day  ::= Monday  |
         Tuesday  |
         Wednesday  |
         Thursday  |
         Friday  |
         Saturday  |
         Sunday ;


domain  ::= Unit  |
            Lift (domain );


assoc a b ::= NilAssoc  |
              Assoc a b (assoc a b);

;;

letrec
  _error = \ -> _error
in let
  _dot)1 = \f g x -> f (g x)
in let
  _flip = \f x y -> f y x
in let
  _max = \x y -> case _> x y of
                   True  -> x;
                   False  -> y
                 end
in let
  _min = \x y -> case _< x y of
                   True  -> x;
                   False  -> y
                 end
in let
  _head = \l -> case l of
                  Cons x xs -> x;
                  Nil  -> _error
                end
in letrec
  _last = \l -> case l of
                  Nil  -> _error;
                  Cons x xs -> case xs of
                                 Nil  -> x;
                                 Cons y ys -> _last xs
                               end
                end
in let
  _tail = \l -> case l of
                  Cons x xs -> xs;
                  Nil  -> _error
                end
in letrec
  _init = \l -> case l of
                  Nil  -> _error;
                  Cons x xs -> case xs of
                                 Nil  -> Nil;
                                 Cons y ys -> Cons x (_init xs)
                               end
                end
in let
  _null = \l -> case l of
                  Nil  -> True;
                  Cons x xs -> False
                end
in letrec
  _foldr = \f z l -> case l of
                       Nil  -> z;
                       Cons x xs -> f x (_foldr f z xs)
                     end
in let
  _append = \l1 l2 -> _foldr Cons l2 l1
in letrec
  _foldl = \f z l -> case l of
                       Nil  -> z;
                       Cons x xs -> _foldl f (f z x) xs
                     end
in letrec
  _del = \xl y -> case xl of
                    Nil  -> Nil;
                    Cons x xs -> case _== x y of
                                   True  -> xs;
                                   False  -> Cons x (_del xs y)
                                 end
                  end
in let
  _diff = \ -> _foldl _del
in let
  __sc)61 = \n dontCare -> _+ n 1
in let
  _length = \ -> _foldl __sc)61 0
in letrec
  _nth = \l n -> case l of
                   Nil  -> _error;
                   Cons x xs -> case _== n 0 of
                                  True  -> x;
                                  False  -> _nth xs (_- n 1)
                                end
                 end
in letrec
  _map = \f l -> case l of
                   Nil  -> Nil;
                   Cons x xs -> Cons (f x) (_map f xs)
                 end
in let
  __sc)76 = \p x xs -> case p x of
                         True  -> Cons x xs;
                         False  -> xs
                       end
in let
  _filter = \p -> _foldr (__sc)76 p) Nil
in let
  _foldl1 = \f xl -> case xl of
                       Nil  -> _error;
                       Cons x xs -> _foldl f x xs
                     end
in letrec
  _scanl = \f q xl -> Cons q (case xl of
                        Nil  -> Nil;
                        Cons x xs -> _scanl f (f q x) xs
                      end)
in let
  _scanl1 = \f xl -> case xl of
                       Nil  -> _error;
                       Cons x xs -> _scanl f x xs
                     end
in letrec
  _foldr1 = \f xl -> case xl of
                       Nil  -> _error;
                       Cons x xs -> case xs of
                                      Nil  -> x;
                                      Cons y ys -> f x (_foldr1 f xs)
                                    end
                     end
in letrec
  _qs)108 = \f q0 xs -> _scanr f q0 xs;
  _scanr = \f q0 xl -> case xl of
                         Nil  -> Cons q0 Nil;
                         Cons x xs -> case _qs)108 f q0 xs of
                                        Nil  -> _error;
                                        Cons qsx qsxs -> Cons (f x qsx) (_qs)108 f q0 xs)
                                      end
                       end
in letrec
  _qs)116 = \f xs -> _scanr1 f xs;
  _scanr1 = \f xl -> case xl of
                       Nil  -> _error;
                       Cons x xs -> case _qs)116 f xs of
                                      Nil  -> _error;
                                      Cons qsx qsxs -> Cons (f x qsx) (_qs)116 f xs)
                                    end
                     end
in letrec
  _iterate = \f x -> Cons x (_iterate f (f x))
in letrec
  _xs = \x -> Cons x (_xs x)
in let
  _repeat = \x -> _xs x
in letrec
  _xss = \xs -> _append xs (_xss xs)
in let
  _cycle = \xs -> _xss xs
in let
  _if = \c t f -> case c of
                    True  -> t;
                    False  -> f
                  end
in letrec
  _take = \n xl -> case _== n 0 of
                     True  -> Nil;
                     False  -> case xl of
                                 Nil  -> Nil;
                                 Cons x xs -> Cons x (_take (_- n 1) xs)
                               end
                   end
in letrec
  _drop = \n xl -> case _== n 0 of
                     True  -> xl;
                     False  -> case xl of
                                 Nil  -> Nil;
                                 Cons x xs -> _drop (_- n 1) xs
                               end
                   end
in letrec
  _splitAt = \n xl -> case _== n 0 of
                        True  -> Pair Nil xl;
                        False  -> case xl of
                                    Nil  -> Pair Nil Nil;
                                    Cons x xs -> case _splitAt (_- n 1) xs of
                                                   Pair xsp xspp -> Pair (Cons x xsp) xspp
                                                 end
                                  end
                      end
in letrec
  _takeWhile = \p xl -> case xl of
                          Nil  -> Nil;
                          Cons x xs -> case p x of
                                         True  -> Cons x (_takeWhile p xs);
                                         False  -> Nil
                                       end
                        end
in letrec
  _dropWhile = \p xl -> case xl of
                          Nil  -> Nil;
                          Cons x xsp -> case p x of
                                          True  -> _dropWhile p xsp;
                                          False  -> xl
                                        end
                        end
in letrec
  _span = \p xs -> case xs of
                     Nil  -> Pair Nil Nil;
                     Cons x xsp -> case p x of
                                     False  -> Pair Nil xs;
                                     True  -> case _span p xsp of
                                                Pair ys zs -> Pair (Cons x ys) zs
                                              end
                                   end
                   end
in let
  _break = \p -> _span (_dot)1 _not p)
in let
  __sc)172 = \x a -> _not (_== a x)
in letrec
  _nub = \xl -> case xl of
                  Nil  -> Nil;
                  Cons x xs -> Cons x (_nub (_filter (__sc)172 x) xs))
                end
in letrec
  _reverseInto = \a l -> case l of
                           Nil  -> a;
                           Cons x xs -> _reverseInto (Cons x a) xs
                         end
in let
  _reverse = \ -> _foldl (_flip Cons) Nil
in let
  __sc)181 = \a b -> _& a b
in let
  _and = \ -> _foldr __sc)181 True
in let
  __sc)185 = \a b -> _| a b
in let
  _or = \ -> _foldr __sc)185 True
in let
  _any = \p -> _dot)1 _or (_map p)
in let
  _all = \p -> _dot)1 _and (_map p)
in let
  __sc)193 = \a b -> _== a b
in let
  _elem = \ -> _dot)1 _any __sc)193
in let
  __sc)197 = \a b -> _not (_== a b)
in let
  _notElem = \ -> _dot)1 _all __sc)197
in let
  __sc)201 = \a b -> _+ a b
in let
  _sum = \ -> _foldl __sc)201 0
in let
  __sc)205 = \a b -> _* a b
in let
  _product = \ -> _foldl __sc)205 1
in let
  __sc)209 = \a b -> _+ a b
in let
  _sums = \ -> _scanl __sc)209 0
in let
  __sc)213 = \a b -> _* a b
in let
  _products = \ -> _scanl __sc)213 1
in let
  _maximum = \ -> _foldl1 _max
in let
  _minimum = \ -> _foldl1 _min
in let
  _concat = \ -> _foldr _append Nil
in letrec
  _zipWith = \z al bl -> case al of
                           Cons a as -> case bl of
                                          Cons b bs -> Cons (z a b) (_zipWith z as bs);
                                          Nil  -> Nil
                                        end;
                           Nil  -> Nil
                         end
in let
  __sc)228 = \xs xss -> _zipWith Cons xs (_append xss (_repeat Nil))
in let
  _transpose = \ -> _foldr __sc)228 Nil
in let
  __sc)232 = \a b -> Pair a b
in let
  _zip = \ -> _zipWith __sc)232
in letrec
  _backMap = \fl v -> case fl of
                        Nil  -> Nil;
                        Cons f fs -> Cons (f v) (_backMap fs v)
                      end
in let
  _g = \ -> _backMap (Cons _not (Cons _not Nil)) False
in let
  _add1 = \x -> _+ 1 x
in let
  _hof = \f y -> _+ 1 (f y)
in let
  _id = \x -> x
in let
  _useHOF = \ -> _hof _id (_hof (_id _id _add1) 43)
in letrec
  _loop)251 = \ -> _loop)251
in let
  _nasty = \x -> _loop)251
in let
  _concat2 = \ -> _foldr _append Nil
in let
  _add)254 = \x y -> _+ x y
in let
  _sum2 = \ -> _foldr _add)254 0
in let
  _hd = \l -> case l of
                Nil  -> _nasty 0;
                Cons x xs -> x
              end
in letrec
  _rev)263 = \acc lisp -> case lisp of
                            Nil  -> acc;
                            Cons x xs -> _rev)263 (Cons x acc) xs
                          end
in let
  _reverse_into = \l -> _rev)263 Nil l
in let
  _f = \ -> _length (_reverse (Cons _not (Cons _not Nil)))
in let
  _funcList = \ -> Cons _not (Cons _not Nil)
in let
  _g1 = \ -> _backMap _funcList False
in let
  _dot)276 = \f g x -> f (g x)
in let
  _areInverses = \f1 f2 equalPred testVal -> case equalPred testVal (_dot)276 f2 f1 testVal) of
                                               True  -> True;
                                               False  -> False
                                             end
in let
  _add)284 = \a b -> _+ a b
in let
  _eq = \a b -> _== a b
in let
  _sub = \a b -> _- b a
in let
  _testInverses = \ -> _areInverses (_add)284 1) (_sub 1) _eq 5
in letrec
  _intsFrom = \a -> Cons a (_intsFrom (_+ a 1))
in letrec
  _loop)294 = \ -> _loop)294
in let
  _interesting = \x -> _loop)294
in let
  _add2 = \x -> _+ 2 x
in letrec
  _fac = \n acc -> _if (_== n 0) acc (_fac (_- n 1) (_* n acc))
in let
  _fact = \n -> _fac n 1
in letrec
  _f2231 = \x y z -> _if (_== y 0) (_f2231 0 1 x) x
in let
  _ff = \c q v -> case v of
                    Nil  -> _f2231 c c q;
                    Cons x xs -> _f2231 c c q
                  end
in letrec
  _f223 = \x y -> _if (_== x 0) y (_f223 (_- x 1) y)
in letrec
  _rf = \a b -> _- b (_rg a 4);
  _rg = \a b -> _if (_== b 0) b (_rf a a)
in let
  _sq = \n -> _* n n
in let
  _nnn = \w -> 1
in letrec
  _f2232 = \x y z p -> _if (_== p 0) (_+ x z) (_+ (_f2232 y 0 0 (_- p 1)) (_f2232 z z 0 (_- p 1)))
in letrec
  _hudak = \x y z p q -> _if (_> p 0) (_if (_== p 1) (_if (_== z 0) x y) (_hudak z z 0 (_- p 1) x)) (_hudak 0 0 z 1 y)
in letrec
  _fa = \x -> case x of
                Na  -> 0;
                Ca y ys -> _+ (_fb ys) y
              end;
  _fb = \x -> case x of
                Nb  -> 0;
                Cb y ys -> _- (_fa ys) y
              end
in letrec
  _z4 = \l1 l2 -> case l1 of
                    Nil  -> Nil;
                    Cons x xs -> case l2 of
                                   Nil  -> Nil;
                                   Cons y ys -> Cons (_+ x y) (_z4 xs ys)
                                 end
                  end
in letrec
  _z6 = \l1 l2 -> case l1 of
                    Nil  -> Nil;
                    Cons x xs -> case l2 of
                                   Nil  -> Nil;
                                   Cons y ys -> Cons (_z4 x y) (_z6 xs ys)
                                 end
                  end
in letrec
  _z8 = \l1 l2 -> case l1 of
                    Nil  -> Nil;
                    Cons x xs -> case l2 of
                                   Nil  -> Nil;
                                   Cons y ys -> Cons (_z6 x y) (_z8 xs ys)
                                 end
                  end
in letrec
  _z10 = \l1 l2 -> case l1 of
                     Nil  -> Nil;
                     Cons x xs -> case l2 of
                                    Nil  -> Nil;
                                    Cons y ys -> Cons (_z8 x y) (_z10 xs ys)
                                  end
                   end
in let
  _swap = \p -> case p of
                  Pair a b -> Pair b a
                end
in let
  _dupFirstOfPair = \p -> case p of
                            Pair a b -> Pair a a
                          end
in let
  _makePair = \x -> Pair x x
in letrec
  _loop)383 = \ -> _loop)383
in let
  _makeBPair1 = \ -> Pair _loop)383 _loop)383
in letrec
  _loop1 = \ -> _loop1
in letrec
  _loop2 = \ -> _loop2
in let
  _makeBPair2 = \ -> Pair _loop1 _loop2
in let
  _glb = \ -> _if True
in letrec
  _zip2 = \l1 l2 -> case l1 of
                      Nil  -> Nil;
                      Cons l1x l1xs -> case l2 of
                                         Nil  -> Nil;
                                         Cons l2x l2xs -> Cons (Pair l1x l2x) (_zip2 l1xs l2xs)
                                       end
                    end
in letrec
  _loop)398 = \ -> _loop)398
in let
  _likeAppend = \l1 l2 -> case l1 of
                            Nil  -> _loop)398;
                            Cons x xs -> Cons x l2
                          end
in letrec
  _split = \l -> case l of
                   Nil  -> Pair Nil Nil;
                   Cons a as -> case as of
                                  Nil  -> Pair (Cons a Nil) Nil;
                                  Cons b bs -> case _split bs of
                                                 Pair xx yy -> Pair (Cons a xx) (Cons b yy)
                                               end
                                end
                 end
in let
  _minC = \c1 c2 -> case c1 of
                      Cpx r1 i1 -> case c2 of
                                     Cpx r2 i2 -> Cpx (_- r1 r2) (_- i1 i2)
                                   end
                    end
in let
  _mulC = \c1 c2 -> case c1 of
                      Cpx r1 i1 -> case c2 of
                                     Cpx r2 i2 -> Cpx (_- (_* r1 r2) (_* i1 i2)) (_+ (_* r1 i2) (_* i1 r2))
                                   end
                    end
in let
  _plusC = \c1 c2 -> case c1 of
                       Cpx r1 i1 -> case c2 of
                                      Cpx r2 i2 -> Cpx (_+ r1 r2) (_+ i1 i2)
                                    end
                     end
in let
  _cos = \x -> _- x 1
in let
  _pi = \ -> 3
in let
  _sin = \x -> _+ x 1
in let
  _z = \j n -> _/ (_* 2 (_* j _pi)) n
in let
  _root = \j n -> Cpx (_cos (_z j n)) (_sin (_z j n))
in letrec
  _merge = \pl -> case pl of
                    Pair as bs -> case as of
                                    Nil  -> bs;
                                    Cons x xs -> Cons x (_merge (Pair bs xs))
                                  end
                  end
in let
  _splitThenMerge = \l -> _merge (_split l)
in letrec
  _loop)449 = \ -> _loop)449
in let
  _reverseAndBottom = \l -> Pair (_reverse l) _loop)449
in let
  _rabAbsCons = \ -> _reverseAndBottom (Cons (Cons 1 Nil) (Cons (Cons 2 Nil) Nil))
in letrec
  _d4 = \xl yl -> case xl of
                    Cons x xs -> case yl of
                                   Cons y ys -> _+ (_* x y) (_d4 xs ys);
                                   Nil  -> 0
                                 end;
                    Nil  -> 0
                  end
in letrec
  _d6 = \xl yl -> case xl of
                    Cons x xs -> case yl of
                                   Cons y ys -> _+ (_d4 x y) (_d6 xs ys);
                                   Nil  -> 0
                                 end;
                    Nil  -> 0
                  end
in letrec
  _d8 = \xl yl -> case xl of
                    Cons x xs -> case yl of
                                   Cons y ys -> _+ (_d6 x y) (_d8 xs ys);
                                   Nil  -> 0
                                 end;
                    Nil  -> 0
                  end
in letrec
  _d10 = \xl yl -> case xl of
                     Cons x xs -> case yl of
                                    Cons y ys -> _+ (_d8 x y) (_d10 xs ys);
                                    Nil  -> 0
                                  end;
                     Nil  -> 0
                   end
in letrec
  _d12 = \xl yl -> case xl of
                     Cons x xs -> case yl of
                                    Cons y ys -> _+ (_d10 x y) (_d12 xs ys);
                                    Nil  -> 0
                                  end;
                     Nil  -> 0
                   end
in let
  _boxid = \ -> Box _id
in let
  _use = \x -> case _boxid of
                 Box f -> f x
               end
in let
  _evenworse = \x -> case _boxid of
                       Box f -> f (Pair x 1)
                     end
in let
  _addInt = \a b -> _+ a b
in let
  _mulInt = \a b -> _* a b
in let
  _negInt = \a -> _- 0 a
in let
  _addBool = \a b -> _| a b
in let
  _mulBool = \a b -> _& a b
in let
  _negBool = \a -> _not a
in let
  _add)509 = \nd -> case nd of
                      NumDict a m n -> a
                    end
in let
  _mul = \nd -> case nd of
                  NumDict a m n -> m
                end
in let
  _neg = \nd -> case nd of
                  NumDict a m n -> n
                end
in let
  _numDInt = \ -> NumDict _addInt _mulInt _negInt
in let
  _numDBool = \ -> NumDict _addBool _mulBool _negBool
in let
  _squarePrime = \numDa x -> _mul numDa x x
in let
  _squaresPrime = \ndt xyz -> case ndt of
                                MkTriple nda ndb ndc -> case xyz of
                                                          MkTriple x y z -> MkTriple (_squarePrime nda x) (_squarePrime ndb y) (_squarePrime ndc z)
                                                        end
                              end
in letrec
  _divide_conq = \base_fn merge_fn problem -> case problem of
                                                Leaf  -> base_fn problem;
                                                Branch l x r -> merge_fn x (_divide_conq base_fn merge_fn l) (_divide_conq base_fn merge_fn r)
                                              end
in let
  _t_base_fn = \t -> 0
in let
  _t_merge_fn = \original_x solved_l_subproblem solved_r_subproblem -> _+ original_x (_+ solved_l_subproblem solved_r_subproblem)
in let
  _treeSum = \tree -> _divide_conq _t_base_fn _t_merge_fn tree
in let
  _m_base_fn = \t -> t
in let
  _m_merge_fn = \original_x solved_l_subproblem solved_r_subproblem -> Branch solved_r_subproblem original_x solved_l_subproblem
in let
  _mirror = \tree -> _divide_conq _m_base_fn _m_merge_fn tree
in letrec
  _f2 = \a b -> case _== a 0 of
                  True  -> b;
                  False  -> _f2 b a
                end
in letrec
  _f3 = \a b c -> case _== a 0 of
                    True  -> b;
                    False  -> _f3 c b a
                  end
in letrec
  _f4 = \a b c d -> case _== a 0 of
                      True  -> b;
                      False  -> _f4 d c b a
                    end
in letrec
  _f5 = \a b c d e -> case _== a 0 of
                        True  -> b;
                        False  -> _f5 e d c b a
                      end
in letrec
  _f6 = \a b c d e f -> case _== a 0 of
                          True  -> b;
                          False  -> _f6 f e d c b a
                        end
in letrec
  _f7 = \a b c d e f g -> case _== a 0 of
                            True  -> b;
                            False  -> _f7 g f e d c b a
                          end
in let
  _p2 = \a b -> a
in let
  _p3 = \a b c -> _+ a c
in let
  _p4 = \a b c d -> _+ a c
in let
  _p5 = \a b c d e -> _+ a (_+ c e)
in let
  _p6 = \a b c d e f -> _+ a (_+ c e)
in let
  _p7 = \a b c d e f g -> _+ a (_+ c (_+ e g))
in let
  _p8 = \a b c d e f g h -> _+ a (_+ c (_+ e g))
in let
  _p9 = \a b c d e f g h i -> _+ a (_+ c (_+ e (_+ g i)))
in let
  _p10 = \a b c d e f g h i j -> _+ a (_+ c (_+ e (_+ g i)))
in let
  _p11 = \a b c d e f g h i j k -> _+ a (_+ c (_+ e (_+ g (_+ i k))))
in let
  _p12 = \a b c d e f g h i j k l -> _+ a (_+ c (_+ e (_+ g (_+ i k))))
in let
  _s2 = \a b -> _+ a b
in let
  _s4 = \a b c d -> _+ a (_+ b (_+ c d))
in let
  _s6 = \a b c d e f -> _+ a (_+ b (_+ c (_+ d (_+ e f))))
in let
  _s8 = \a b c d e f g h -> _+ a (_+ b (_+ c (_+ d (_+ e (_+ f (_+ g h))))))
in let
  _s10 = \a b c d e f g h i j -> _+ a (_+ b (_+ c (_+ d (_+ e (_+ f (_+ g (_+ h (_+ i j))))))))
in let
  _s12 = \a b c d e f g h i j k l -> _+ a (_+ b (_+ c (_+ d (_+ e (_+ f (_+ g (_+ h (_+ i (_+ j (_+ k l))))))))))
in let
  _l2 = \a b -> 37
in let
  _l4 = \a b c d -> 37
in let
  _l6 = \a b c d e f -> 37
in let
  _l8 = \a b c d e f g h -> 37
in let
  _l9 = \a b c d e f g h i -> 37
in let
  _l10 = \a b c d e f g h i j -> 37
in let
  _l12 = \a b c d e f g h i j k l -> 37
in letrec
  _bottomAny = \ -> _bottomAny
in letrec
  _bigs = \d l2 -> case l2 of
                     Nil  -> Nil;
                     Cons l2x l2xs -> case _> l2x d of
                                        True  -> Cons l2x (_bigs d l2xs);
                                        False  -> _bigs d l2xs
                                      end
                   end
in letrec
  _smalls = \d l2 -> case l2 of
                       Nil  -> Nil;
                       Cons l2x l2xs -> case _<= l2x d of
                                          True  -> Cons l2x (_smalls d l2xs);
                                          False  -> _smalls d l2xs
                                        end
                     end
in letrec
  _qsort = \l -> case l of
                   Nil  -> Nil;
                   Cons h t -> _append (_qsort (_smalls h t)) (Cons h (_qsort (_bigs h t)))
                 end
in let
  _topInt = \ -> 42
in letrec
  _domainHeight = \d -> case d of
                          Unit  -> 1;
                          Lift d1 -> _+ 1 (_domainHeight d1)
                        end
in let
  _workingHours = \d -> case d of
                          Saturday  -> 0;
                          Sunday  -> 0;
                          Monday  -> 2;
                          Tuesday  -> 4;
                          Wednesday  -> 5;
                          Thursday  -> 3;
                          Friday  -> 1
                        end
in let
  _incHead = \l -> case l of
                     Nil  -> Nil;
                     Cons a as -> Cons (_+ a 1) as
                   end
in letrec
  _tricky = \a b -> case _== a 0 of
                      True  -> b;
                      False  -> _tricky (_- a 1) b
                    end
in letrec
  _rev)816 = \x -> case x of
                     Nil  -> Nil;
                     Cons a as -> _append (_rev)816 as) (Cons a Nil)
                   end
in let
  _first = \p -> case p of
                   Pair a b -> a
                 end
in let
  _second = \p -> case p of
                    Pair a b -> b
                  end
in letrec
  _sumt = \t -> case t of
                  Leaf  -> 0;
                  Branch l x r -> _+ (_sumt l) (_+ x (_sumt r))
                end
in letrec
  _aLookupDef = \al key default -> case al of
                                     NilAssoc  -> default;
                                     Assoc a b abs -> case _== a key of
                                                        True  -> b;
                                                        False  -> _aLookupDef abs key default
                                                      end
                                   end
in letrec
  _aDomain = \al -> case al of
                      NilAssoc  -> Nil;
                      Assoc a b abs -> Cons a (_aDomain abs)
                    end
in letrec
  _aInverse = \al -> case al of
                       NilAssoc  -> NilAssoc;
                       Assoc a b abs -> Assoc b a (_aInverse abs)
                     end
in letrec
  _flatten = \t -> case t of
                     Leaf  -> Nil;
                     Branch l x r -> _append (_flatten l) (Cons x (_flatten r))
                   end
in letrec
  _insert = \x t -> case t of
                      Leaf  -> Branch Leaf x Leaf;
                      Branch l x1 r -> case _== x x1 of
                                         True  -> Branch l x1 r;
                                         False  -> case _< x x1 of
                                                     True  -> Branch (_insert x l) x1 r;
                                                     False  -> Branch l x1 (_insert x r)
                                                   end
                                       end
                    end
in letrec
  _ltt = \tr li -> case li of
                     Nil  -> tr;
                     Cons x xs -> _ltt (_insert x tr) xs
                   end
in let
  _listToTree = \l -> _ltt Leaf l
in let
  _nodups = \l -> _flatten (_listToTree l)
in 42


=============
=== Types ===
=============

   _error ::                 a
   _dot)1 ::                 ( a ->  b) ->  ( c ->  a) ->  c ->  b
   _flip ::                  ( a ->  b ->  c) ->  b ->  a ->  c
   _max ::                   int ->  int ->  int
   _min ::                   int ->  int ->  int
   _head ::                  (list a) ->  a
   _last ::                  (list a) ->  a
   _tail ::                  (list a) ->  (list a)
   _init ::                  (list a) ->  (list a)
   _null ::                  (list a) ->  bool
   _foldr ::                 ( a ->  b ->  b) ->  b ->  (list a) ->  b
   _append ::                (list a) ->  (list a) ->  (list a)
   _foldl ::                 ( a ->  b ->  a) ->  a ->  (list b) ->  a
   _del ::                   (list int) ->  int ->  (list int)
   _diff ::                  (list int) ->  (list int) ->  (list int)
   __sc)61 ::                int ->  a ->  int
   _length ::                (list a) ->  int
   _nth ::                   (list a) ->  int ->  a
   _map ::                   ( a ->  b) ->  (list a) ->  (list b)
   __sc)76 ::                ( a ->  bool) ->  a ->  (list a) ->  (list a)
   _filter ::                ( a ->  bool) ->  (list a) ->  (list a)
   _foldl1 ::                ( a ->  a ->  a) ->  (list a) ->  a
   _scanl ::                 ( a ->  b ->  a) ->  a ->  (list b) ->  (list a)
   _scanl1 ::                ( a ->  a ->  a) ->  (list a) ->  (list a)
   _foldr1 ::                ( a ->  a ->  a) ->  (list a) ->  a
   _qs)108 ::                ( a ->  b ->  b) ->  b ->  (list a) ->  (list b)
   _scanr ::                 ( a ->  b ->  b) ->  b ->  (list a) ->  (list b)
   _qs)116 ::                ( a ->  b ->  b) ->  (list a) ->  (list b)
   _scanr1 ::                ( a ->  b ->  b) ->  (list a) ->  (list b)
   _iterate ::               ( a ->  a) ->  a ->  (list a)
   _xs ::                    a ->  (list a)
   _repeat ::                a ->  (list a)
   _xss ::                   (list a) ->  (list a)
   _cycle ::                 (list a) ->  (list a)
   _if ::                    bool ->  a ->  a ->  a
   _take ::                  int ->  (list a) ->  (list a)
   _drop ::                  int ->  (list a) ->  (list a)
   _splitAt ::               int ->  (list a) ->  (pair (list a) (list a))
   _takeWhile ::             ( a ->  bool) ->  (list a) ->  (list a)
   _dropWhile ::             ( a ->  bool) ->  (list a) ->  (list a)
   _span ::                  ( a ->  bool) ->  (list a) ->  (pair (list a) (list a))
   _break ::                 ( a ->  bool) ->  (list a) ->  (pair (list a) (list a))
   __sc)172 ::               int ->  int ->  bool
   _nub ::                   (list int) ->  (list int)
   _reverseInto ::           (list a) ->  (list a) ->  (list a)
   _reverse ::               (list a) ->  (list a)
   __sc)181 ::               bool ->  bool ->  bool
   _and ::                   (list bool) ->  bool
   __sc)185 ::               bool ->  bool ->  bool
   _or ::                    (list bool) ->  bool
   _any ::                   ( a ->  bool) ->  (list a) ->  bool
   _all ::                   ( a ->  bool) ->  (list a) ->  bool
   __sc)193 ::               int ->  int ->  bool
   _elem ::                  int ->  (list int) ->  bool
   __sc)197 ::               int ->  int ->  bool
   _notElem ::               int ->  (list int) ->  bool
   __sc)201 ::               int ->  int ->  int
   _sum ::                   (list int) ->  int
   __sc)205 ::               int ->  int ->  int
   _product ::               (list int) ->  int
   __sc)209 ::               int ->  int ->  int
   _sums ::                  (list int) ->  (list int)
   __sc)213 ::               int ->  int ->  int
   _products ::              (list int) ->  (list int)
   _maximum ::               (list int) ->  int
   _minimum ::               (list int) ->  int
   _concat ::                (list (list a)) ->  (list a)
   _zipWith ::               ( a ->  b ->  c) ->  (list a) ->  (list b) ->  (list c)
   __sc)228 ::               (list a) ->  (list (list a)) ->  (list (list a))
   _transpose ::             (list (list a)) ->  (list (list a))
   __sc)232 ::               a ->  b ->  (pair a b)
   _zip ::                   (list a) ->  (list b) ->  (list (pair a b))
   _backMap ::               (list ( a ->  b)) ->  a ->  (list b)
   _g ::                     (list bool)
   _add1 ::                  int ->  int
   _hof ::                   ( a ->  int) ->  a ->  int
   _id ::                    a ->  a
   _useHOF ::                int
   _loop)251 ::              a
   _nasty ::                 a ->  b
   _concat2 ::               (list (list a)) ->  (list a)
   _add)254 ::               int ->  int ->  int
   _sum2 ::                  (list int) ->  int
   _hd ::                    (list a) ->  a
   _rev)263 ::               (list a) ->  (list a) ->  (list a)
   _reverse_into ::          (list a) ->  (list a)
   _f ::                     int
   _funcList ::              (list ( bool ->  bool))
   _g1 ::                    (list bool)
   _dot)276 ::               ( a ->  b) ->  ( c ->  a) ->  c ->  b
   _areInverses ::           ( a ->  b) ->  ( b ->  c) ->  ( a ->  c ->  bool) ->  a ->  bool
   _add)284 ::               int ->  int ->  int
   _eq ::                    int ->  int ->  bool
   _sub ::                   int ->  int ->  int
   _testInverses ::          bool
   _intsFrom ::              int ->  (list int)
   _loop)294 ::              a
   _interesting ::           a ->  b
   _add2 ::                  int ->  int
   _fac ::                   int ->  int ->  int
   _fact ::                  int ->  int
   _f2231 ::                 int ->  int ->  int ->  int
   _ff ::                    int ->  int ->  (list a) ->  int
   _f223 ::                  int ->  a ->  a
   _rf ::                    int ->  int ->  int
   _rg ::                    int ->  int ->  int
   _sq ::                    int ->  int
   _nnn ::                   a ->  int
   _f2232 ::                 int ->  int ->  int ->  int ->  int
   _hudak ::                 int ->  int ->  int ->  int ->  int ->  int
   _fa ::                    (la int) ->  int
   _fb ::                    (lb int) ->  int
   _z4 ::                    (list int) ->  (list int) ->  (list int)
   _z6 ::                    (list (list int)) ->  (list (list int)) ->  (list (list int))
   _z8 ::                    (list (list (list int))) ->  (list (list (list int))) ->  (list (list (list int)))
   _z10 ::                   (list (list (list (list int)))) ->  (list (list (list (list int)))) ->  (list (list (list (list int))))
   _swap ::                  (pair a b) ->  (pair b a)
   _dupFirstOfPair ::        (pair a b) ->  (pair a a)
   _makePair ::              a ->  (pair a a)
   _loop)383 ::              a
   _makeBPair1 ::            (pair a b)
   _loop1 ::                 a
   _loop2 ::                 a
   _makeBPair2 ::            (pair a b)
   _glb ::                   a ->  a ->  a
   _zip2 ::                  (list a) ->  (list b) ->  (list (pair a b))
   _loop)398 ::              a
   _likeAppend ::            (list a) ->  (list a) ->  (list a)
   _split ::                 (list a) ->  (pair (list a) (list a))
   _minC ::                  (complex int int) ->  (complex int int) ->  (complex int int)
   _mulC ::                  (complex int int) ->  (complex int int) ->  (complex int int)
   _plusC ::                 (complex int int) ->  (complex int int) ->  (complex int int)
   _cos ::                   int ->  int
   _pi ::                    int
   _sin ::                   int ->  int
   _z ::                     int ->  int ->  int
   _root ::                  int ->  int ->  (complex int int)
   _merge ::                 (pair (list a) (list a)) ->  (list a)
   _splitThenMerge ::        (list a) ->  (list a)
   _loop)449 ::              a
   _reverseAndBottom ::      (list a) ->  (pair (list a) b)
   _rabAbsCons ::            (pair (list (list int)) a)
   _d4 ::                    (list int) ->  (list int) ->  int
   _d6 ::                    (list (list int)) ->  (list (list int)) ->  int
   _d8 ::                    (list (list (list int))) ->  (list (list (list int))) ->  int
   _d10 ::                   (list (list (list (list int)))) ->  (list (list (list (list int)))) ->  int
   _d12 ::                   (list (list (list (list (list int))))) ->  (list (list (list (list (list int))))) ->  int
   _boxid ::                 (boxed ( a ->  a))
   _use ::                   a ->  a
   _evenworse ::             a ->  (pair a int)
   _addInt ::                int ->  int ->  int
   _mulInt ::                int ->  int ->  int
   _negInt ::                int ->  int
   _addBool ::               bool ->  bool ->  bool
   _mulBool ::               bool ->  bool ->  bool
   _negBool ::               bool ->  bool
   _add)509 ::               (numD a b) ->  a
   _mul ::                   (numD a b) ->  a
   _neg ::                   (numD a b) ->  b
   _numDInt ::               (numD ( int ->  int ->  int) ( int ->  int))
   _numDBool ::              (numD ( bool ->  bool ->  bool) ( bool ->  bool))
   _squarePrime ::           (numD ( a ->  a ->  b) c) ->  a ->  b
   _squaresPrime ::          (triple (numD ( a ->  a ->  b) c) (numD ( d ->  d ->  e) f) (numD ( g ->  g ->  h) i)) ->  (triple a d g) ->  (triple b e h)
   _divide_conq ::           ( (tree a) ->  b) ->  ( a ->  b ->  b ->  b) ->  (tree a) ->  b
   _t_base_fn ::             a ->  int
   _t_merge_fn ::            int ->  int ->  int ->  int
   _treeSum ::               (tree int) ->  int
   _m_base_fn ::             a ->  a
   _m_merge_fn ::            a ->  (tree a) ->  (tree a) ->  (tree a)
   _mirror ::                (tree a) ->  (tree a)
   _f2 ::                    int ->  int ->  int
   _f3 ::                    int ->  a ->  int ->  a
   _f4 ::                    int ->  a ->  a ->  int ->  a
   _f5 ::                    int ->  a ->  b ->  a ->  int ->  a
   _f6 ::                    int ->  a ->  b ->  b ->  a ->  int ->  a
   _f7 ::                    int ->  a ->  b ->  c ->  b ->  a ->  int ->  a
   _p2 ::                    a ->  b ->  a
   _p3 ::                    int ->  a ->  int ->  int
   _p4 ::                    int ->  a ->  int ->  b ->  int
   _p5 ::                    int ->  a ->  int ->  b ->  int ->  int
   _p6 ::                    int ->  a ->  int ->  b ->  int ->  c ->  int
   _p7 ::                    int ->  a ->  int ->  b ->  int ->  c ->  int ->  int
   _p8 ::                    int ->  a ->  int ->  b ->  int ->  c ->  int ->  d ->  int
   _p9 ::                    int ->  a ->  int ->  b ->  int ->  c ->  int ->  d ->  int ->  int
   _p10 ::                   int ->  a ->  int ->  b ->  int ->  c ->  int ->  d ->  int ->  e ->  int
   _p11 ::                   int ->  a ->  int ->  b ->  int ->  c ->  int ->  d ->  int ->  e ->  int ->  int
   _p12 ::                   int ->  a ->  int ->  b ->  int ->  c ->  int ->  d ->  int ->  e ->  int ->  f ->  int
   _s2 ::                    int ->  int ->  int
   _s4 ::                    int ->  int ->  int ->  int ->  int
   _s6 ::                    int ->  int ->  int ->  int ->  int ->  int ->  int
   _s8 ::                    int ->  int ->  int ->  int ->  int ->  int ->  int ->  int ->  int
   _s10 ::                   int ->  int ->  int ->  int ->  int ->  int ->  int ->  int ->  int ->  int ->  int
   _s12 ::                   int ->  int ->  int ->  int ->  int ->  int ->  int ->  int ->  int ->  int ->  int ->  int ->  int
   _l2 ::                    a ->  b ->  int
   _l4 ::                    a ->  b ->  c ->  d ->  int
   _l6 ::                    a ->  b ->  c ->  d ->  e ->  f ->  int
   _l8 ::                    a ->  b ->  c ->  d ->  e ->  f ->  g ->  h ->  int
   _l9 ::                    a ->  b ->  c ->  d ->  e ->  f ->  g ->  h ->  i ->  int
   _l10 ::                   a ->  b ->  c ->  d ->  e ->  f ->  g ->  h ->  i ->  j ->  int
   _l12 ::                   a ->  b ->  c ->  d ->  e ->  f ->  g ->  h ->  i ->  j ->  k ->  l ->  int
   _bottomAny ::             a
   _bigs ::                  int ->  (list int) ->  (list int)
   _smalls ::                int ->  (list int) ->  (list int)
   _qsort ::                 (list int) ->  (list int)
   _topInt ::                int
   _domainHeight ::          (domain) ->  int
   _workingHours ::          (day) ->  int
   _incHead ::               (list int) ->  (list int)
   _tricky ::                int ->  a ->  a
   _rev)816 ::               (list a) ->  (list a)
   _first ::                 (pair a b) ->  a
   _second ::                (pair a b) ->  b
   _sumt ::                  (tree int) ->  int
   _aLookupDef ::            (assoc int a) ->  int ->  a ->  a
   _aDomain ::               (assoc a b) ->  (list a)
   _aInverse ::              (assoc a b) ->  (assoc b a)
   _flatten ::               (tree a) ->  (list a)
   _insert ::                int ->  (tree int) ->  (tree int)
   _ltt ::                   (tree int) ->  (list int) ->  (tree int)
   _listToTree ::            (list int) ->  (tree int)
   _nodups ::                (list int) ->  (list int)
   Nil ::                    (list a)
   Cons ::                   a ->  (list a) ->  (list a)
   Pair ::                   a ->  b ->  (pair a b)
   Tp3 ::                    a ->  b ->  c ->  (tp3 a b c)
   Tp4 ::                    a ->  b ->  c ->  d ->  (tp4 a b c d)
   Na ::                     (la a)
   Ca ::                     a ->  (lb a) ->  (la a)
   Nb ::                     (lb a)
   Cb ::                     a ->  (la a) ->  (lb a)
   Cpx ::                    a ->  b ->  (complex a b)
   Box ::                    a ->  (boxed a)
   NumDict ::                a ->  a ->  b ->  (numD a b)
   MkTriple ::               a ->  b ->  c ->  (triple a b c)
   Leaf ::                   (tree a)
   Branch ::                 (tree a) ->  a ->  (tree a) ->  (tree a)
   Monday ::                 (day)
   Tuesday ::                (day)
   Wednesday ::              (day)
   Thursday ::               (day)
   Friday ::                 (day)
   Saturday ::               (day)
   Sunday ::                 (day)
   Unit ::                   (domain)
   Lift ::                   (domain) ->  (domain)
   NilAssoc ::               (assoc a b)
   Assoc ::                  a ->  b ->  (assoc a b) ->  (assoc a b)
   True ::                   bool
   False ::                  bool


================
=== Settings ===
================

Scaleup ratio = 20/10
Lower lattice size limit = 0
Upper lattice size limit = 1000000
Polymorphic generalisation limit = 10000


==================
=== Strictness ===
==================

Function "_error" is a constant point 0 in domain 
    {0 1}


Domains for "_dot)1" are
       8   [Two,Two,Two]
      12   [Func [Two] Two,Two,Two]
      18   [Func [Two] Two,Func [Two] Two,Two]

Evaluated at size       8 using    5 evals safe "_dot)1"
Evaluated at size       8 using    5 evals live "_dot)1"
Evaluated at size      12 using    4 evals safe "_dot)1"
Evaluated at size      12 using    4 evals live "_dot)1"
Evaluated at size      18 using    2 evals safe "_dot)1"
Evaluated at size      18 using    2 evals live "_dot)1"

Function "_dot)1" has input domains:
   1) Func [Two] Two
   2) Func [Two] Two
   3) Two
   and output domain
      Two

with value:

RepTwo (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Zero],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Zero],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),One]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),One],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),One],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Zero]])


Domains for "_flip" are
       8   [Two,Two,Two]
      24   [Func [Two,Two] Two,Two,Two]

Evaluated at size       8 using    5 evals safe "_flip"
Evaluated at size       8 using    5 evals live "_flip"
Evaluated at size      24 using   16 evals safe "_flip"
Evaluated at size      24 using   16 evals live "_flip"

Function "_flip" has input domains:
   1) Func [Two,Two] Two
   2) Two
   3) Two
   and output domain
      Two

with value:

RepTwo (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Zero,Zero],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),One,Zero],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),Zero,One],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,One]] [MkFrel [Zero,One],MkFrel [One,Zero]])),One,One]] [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),One,One],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),Zero,One],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One],MkFrel [One,Zero]] [MkFrel [Zero,Zero]])),Zero,Zero],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),One,Zero]])


Domains for "_max" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_max"
Evaluated at size       4 using    4 evals live "_max"

Function "_max" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_min" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_min"
Evaluated at size       4 using    4 evals live "_min"

Function "_min" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_head" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals safe "_head"
Evaluated at size       2 using    2 evals live "_head"
Evaluated at size       4 using    2 evals safe "_head"
Evaluated at size       4 using    2 evals live "_head"

Function "_head" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_last" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals live "_last"
Evaluated at size       2 using    2 evals live "_last"
Evaluated at size       2 using    2 evals safe "_last"
Evaluated at size       4 using    2 evals live "_last"
Evaluated at size       4 using    1 evals live "_last"
Evaluated at size       4 using    1 evals safe "_last"

Function "_last" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  2
       0   |  0



Domains for "_tail" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals safe "_tail"
Evaluated at size       2 using    4 evals live "_tail"
Evaluated at size       4 using    3 evals safe "_tail"
Evaluated at size       4 using    3 evals live "_tail"

Function "_tail" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  2
       2   |  
       1   |  1
       0   |  0



Domains for "_init" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals live "_init"
Evaluated at size       2 using    4 evals live "_init"
Evaluated at size       2 using    4 evals safe "_init"
Evaluated at size       4 using    3 evals live "_init"
Evaluated at size       4 using    2 evals live "_init"
Evaluated at size       4 using    2 evals safe "_init"

Function "_init" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  2
       2   |  
       1   |  1
       0   |  0



Domains for "_null" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals safe "_null"
Evaluated at size       2 using    2 evals live "_null"
Evaluated at size       4 using    2 evals safe "_null"
Evaluated at size       4 using    2 evals live "_null"

Function "_null" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_foldr" are
       8   [Two,Two,Two]
      24   [Func [Two,Two] Two,Two,Two]
      48   [Func [Two,Two] Two,Two,Lift2 [Two]]

Evaluated at size       8 using    7 evals live "_foldr"
Evaluated at size       8 using    7 evals live "_foldr"
Evaluated at size       8 using    7 evals safe "_foldr"
Evaluated at size      24 using    4 evals live "_foldr"
Evaluated at size      24 using    1 evals live "_foldr"
Evaluated at size      24 using    1 evals safe "_foldr"
Evaluated at size      48 using    7 evals live "_foldr"
Evaluated at size      48 using    2 evals live "_foldr"
Evaluated at size      48 using    2 evals safe "_foldr"

Function "_foldr" has input domains:
   1) Func [Two,Two] Two
   2) Two
   3) Lift2 [Two]
   and output domain
      Two

with value:

RepTwo (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),One,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),One,UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),Zero,Up2]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One,Stop2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),Zero,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),One,Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,One]] [MkFrel [Zero,One],MkFrel [One,Zero]])),One,UpUp2 [Zero]]])


Domains for "_append" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]
      16   [Lift2 [Two],Lift2 [Two]]

Evaluated at size       4 using    7 evals safe "_append"
Evaluated at size       4 using    7 evals live "_append"
Evaluated at size       8 using    3 evals safe "_append"
Evaluated at size       8 using    3 evals live "_append"
Evaluated at size      16 using    4 evals safe "_append"
Evaluated at size      16 using    4 evals live "_append"

Function "_append" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3 3
       2   |  2 2
       1   |  1 0
       0   |  0 0



Domains for "_foldl" are
       8   [Two,Two,Two]
      24   [Func [Two,Two] Two,Two,Two]
      48   [Func [Two,Two] Two,Two,Lift2 [Two]]

Evaluated at size       8 using    6 evals live "_foldl"
Evaluated at size       8 using    7 evals live "_foldl"
Evaluated at size       8 using    7 evals live "_foldl"
Evaluated at size       8 using    7 evals safe "_foldl"
Evaluated at size      24 using    4 evals live "_foldl"
Evaluated at size      24 using    1 evals live "_foldl"
Evaluated at size      24 using    1 evals safe "_foldl"
Evaluated at size      48 using   11 evals live "_foldl"
Evaluated at size      48 using    2 evals live "_foldl"
Evaluated at size      48 using    2 evals safe "_foldl"

Function "_foldl" has input domains:
   1) Func [Two,Two] Two
   2) Two
   3) Lift2 [Two]
   and output domain
      Two

with value:

RepTwo (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),One,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),Zero,UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),One,UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One,Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),Zero,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,One]] [MkFrel [Zero,One],MkFrel [One,Zero]])),One,UpUp2 [Zero]]])


Domains for "_del" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]

Evaluated at size       4 using    6 evals live "_del"
Evaluated at size       4 using    6 evals live "_del"
Evaluated at size       4 using    6 evals safe "_del"
Evaluated at size       8 using    5 evals live "_del"
Evaluated at size       8 using    4 evals live "_del"
Evaluated at size       8 using    4 evals safe "_del"

Function "_del" has input domains:
   1) {0 1 2 3}
   2) {0 1}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3 0
       2   |  2 1
       1   |  1 1
       0   |  0 0



Domains for "_diff" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]
      16   [Lift2 [Two],Lift2 [Two]]

Evaluated at size       4 using    8 evals safe "_diff"
Evaluated at size       4 using    8 evals live "_diff"
Evaluated at size       8 using    2 evals safe "_diff"
Evaluated at size       8 using    2 evals live "_diff"
Evaluated at size      16 using    8 evals safe "_diff"
Evaluated at size      16 using    8 evals live "_diff"

Function "_diff" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3 2
       2   |  2 2
       1   |  1 2
       0   |  0 0



Domains for "__sc)61" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "__sc)61"
Evaluated at size       4 using    4 evals live "__sc)61"

Function "__sc)61" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0
       0   |  0 0



Domains for "_length" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals safe "_length"
Evaluated at size       2 using    2 evals live "_length"
Evaluated at size       4 using    2 evals safe "_length"
Evaluated at size       4 using    2 evals live "_length"

Function "_length" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  2
       0   |  0



Domains for "_nth" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]

Evaluated at size       4 using    4 evals live "_nth"
Evaluated at size       4 using    4 evals live "_nth"
Evaluated at size       4 using    4 evals safe "_nth"
Evaluated at size       8 using    2 evals live "_nth"
Evaluated at size       8 using    0 evals live "_nth"
Evaluated at size       8 using    0 evals safe "_nth"

Function "_nth" has input domains:
   1) {0 1 2 3}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_map" are
       4   [Two,Two]
       6   [Func [Two] Two,Two]
      12   [Func [Two] Two,Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_map"
Evaluated at size       4 using    6 evals live "_map"
Evaluated at size       4 using    6 evals safe "_map"
Evaluated at size       6 using    0 evals live "_map"
Evaluated at size       6 using    0 evals safe "_map"
Evaluated at size      12 using    7 evals live "_map"
Evaluated at size      12 using    3 evals live "_map"
Evaluated at size      12 using    3 evals safe "_map"

Function "_map" has input domains:
   1) Func [Two] Two
   2) Lift2 [Two]
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Up2]]) [RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Up2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),UpUp2 [Zero]]])]


Domains for "__sc)76" are
       8   [Two,Two,Two]
      12   [Func [Two] Two,Two,Two]
      24   [Func [Two] Two,Two,Lift2 [Two]]

Evaluated at size       8 using    9 evals safe "__sc)76"
Evaluated at size       8 using    9 evals live "__sc)76"
Evaluated at size      12 using    6 evals safe "__sc)76"
Evaluated at size      12 using    6 evals live "__sc)76"
Evaluated at size      24 using    5 evals safe "__sc)76"
Evaluated at size      24 using    5 evals live "__sc)76"

Function "__sc)76" has input domains:
   1) Func [Two] Two
   2) Two
   3) Lift2 [Two]
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Zero,Stop2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),One,Stop2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),One,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Zero,UpUp2 [One]]]) (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Zero,UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),One,UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),One,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),One,Up2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Zero,UpUp2 [One]]]) [RepTwo (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Zero,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),One,UpUp2 [One]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),One,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),One,UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Zero,UpUp2 [One]]])]


Domains for "_filter" are
       4   [Two,Two]
       6   [Func [Two] Two,Two]
      12   [Func [Two] Two,Lift2 [Two]]

Evaluated at size       4 using    6 evals safe "_filter"
Evaluated at size       4 using    6 evals live "_filter"
Evaluated at size       6 using    0 evals safe "_filter"
Evaluated at size       6 using    0 evals live "_filter"
Evaluated at size      12 using    8 evals safe "_filter"
Evaluated at size      12 using    8 evals live "_filter"

Function "_filter" has input domains:
   1) Func [Two] Two
   2) Lift2 [Two]
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Up2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),UpUp2 [Zero]]]) [RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Up2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),UpUp2 [Zero]]])]


Domains for "_foldl1" are
       4   [Two,Two]
      12   [Func [Two,Two] Two,Two]
      24   [Func [Two,Two] Two,Lift2 [Two]]

Evaluated at size       4 using    4 evals safe "_foldl1"
Evaluated at size       4 using    4 evals live "_foldl1"
Evaluated at size      12 using    0 evals safe "_foldl1"
Evaluated at size      12 using    0 evals live "_foldl1"
Evaluated at size      24 using   10 evals safe "_foldl1"
Evaluated at size      24 using   10 evals live "_foldl1"

Function "_foldl1" has input domains:
   1) Func [Two,Two] Two
   2) Lift2 [Two]
   and output domain
      Two

with value:

RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,One]] [MkFrel [Zero,One],MkFrel [One,Zero]])),UpUp2 [Zero]]])


Domains for "_scanl" are
       8   [Two,Two,Two]
      24   [Func [Two,Two] Two,Two,Two]
      48   [Func [Two,Two] Two,Two,Lift2 [Two]]

Evaluated at size       8 using    9 evals live "_scanl"
Evaluated at size       8 using    9 evals live "_scanl"
Evaluated at size       8 using    9 evals safe "_scanl"
Evaluated at size      24 using    0 evals live "_scanl"
Evaluated at size      24 using    0 evals safe "_scanl"
Evaluated at size      48 using   14 evals live "_scanl"
Evaluated at size      48 using    3 evals live "_scanl"
Evaluated at size      48 using    3 evals safe "_scanl"

Function "_scanl" has input domains:
   1) Func [Two,Two] Two
   2) Two
   3) Lift2 [Two]
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Zero,Stop2]] []) (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Zero,UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One,Up2]]) [RepTwo (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),One,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),One,UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Zero,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One,Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),One,UpUp2 [Zero]]])]


Domains for "_scanl1" are
       4   [Two,Two]
      12   [Func [Two,Two] Two,Two]
      24   [Func [Two,Two] Two,Lift2 [Two]]

Evaluated at size       4 using    6 evals safe "_scanl1"
Evaluated at size       4 using    6 evals live "_scanl1"
Evaluated at size      12 using    0 evals safe "_scanl1"
Evaluated at size      12 using    0 evals live "_scanl1"
Evaluated at size      24 using    9 evals safe "_scanl1"
Evaluated at size      24 using    9 evals live "_scanl1"

Function "_scanl1" has input domains:
   1) Func [Two,Two] Two
   2) Lift2 [Two]
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Stop2]]) (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Up2]]) [RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),UpUp2 [Zero]]])]


Domains for "_foldr1" are
       4   [Two,Two]
      12   [Func [Two,Two] Two,Two]
      24   [Func [Two,Two] Two,Lift2 [Two]]

Evaluated at size       4 using    4 evals live "_foldr1"
Evaluated at size       4 using    4 evals live "_foldr1"
Evaluated at size       4 using    4 evals safe "_foldr1"
Evaluated at size      12 using    0 evals live "_foldr1"
Evaluated at size      12 using    0 evals safe "_foldr1"
Evaluated at size      24 using   11 evals live "_foldr1"
Evaluated at size      24 using    2 evals live "_foldr1"
Evaluated at size      24 using    2 evals safe "_foldr1"

Function "_foldr1" has input domains:
   1) Func [Two,Two] Two
   2) Lift2 [Two]
   and output domain
      Two

with value:

RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Stop2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,One]] [MkFrel [Zero,One],MkFrel [One,Zero]])),UpUp2 [Zero]]])


Domains for "_qs)108" are
       8   [Two,Two,Two]
      24   [Func [Two,Two] Two,Two,Two]
      48   [Func [Two,Two] Two,Two,Lift2 [Two]]


Domains for "_scanr" are
       8   [Two,Two,Two]
      24   [Func [Two,Two] Two,Two,Two]
      48   [Func [Two,Two] Two,Two,Lift2 [Two]]

Evaluated at size       8 using    3 evals live "_qs)108"
Evaluated at size       8 using    9 evals live "_scanr"
Evaluated at size       8 using    9 evals live "_qs)108"
Evaluated at size       8 using    9 evals live "_scanr"
Evaluated at size       8 using    9 evals live "_qs)108"
Evaluated at size       8 using    9 evals live "_scanr"
Evaluated at size       8 using    9 evals safe "_qs)108"
Evaluated at size       8 using    9 evals safe "_scanr"
Evaluated at size      24 using    0 evals live "_qs)108"
Evaluated at size      24 using    0 evals live "_scanr"
Evaluated at size      24 using    0 evals safe "_qs)108"
Evaluated at size      24 using    0 evals safe "_scanr"
Evaluated at size      48 using    3 evals live "_qs)108"
Evaluated at size      48 using   15 evals live "_scanr"
Evaluated at size      48 using   15 evals live "_qs)108"
Evaluated at size      48 using    4 evals live "_scanr"
Evaluated at size      48 using    4 evals live "_qs)108"
Evaluated at size      48 using    4 evals live "_scanr"
Evaluated at size      48 using    4 evals safe "_qs)108"
Evaluated at size      48 using    4 evals safe "_scanr"

Function "_qs)108" has input domains:
   1) Func [Two,Two] Two
   2) Two
   3) Lift2 [Two]
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Zero,UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One,Up2]]) (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Zero,UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One,Up2]]) [RepTwo (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),One,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),One,UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Zero,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One,Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),One,UpUp2 [Zero]]])]


Function "_scanr" has input domains:
   1) Func [Two,Two] Two
   2) Two
   3) Lift2 [Two]
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Zero,UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One,Up2]]) (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Zero,UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One,Up2]]) [RepTwo (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),One,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),One,UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Zero,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One,Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),One,UpUp2 [Zero]]])]


Domains for "_qs)116" are
       4   [Two,Two]
      12   [Func [Two,Two] Two,Two]
      24   [Func [Two,Two] Two,Lift2 [Two]]


Domains for "_scanr1" are
       4   [Two,Two]
      12   [Func [Two,Two] Two,Two]
      24   [Func [Two,Two] Two,Lift2 [Two]]

Evaluated at size       4 using    3 evals live "_qs)116"
Evaluated at size       4 using    3 evals live "_scanr1"
Evaluated at size       4 using    3 evals safe "_qs)116"
Evaluated at size       4 using    3 evals safe "_scanr1"
Evaluated at size      12 using    0 evals live "_qs)116"
Evaluated at size      12 using    0 evals live "_scanr1"
Evaluated at size      12 using    0 evals safe "_qs)116"
Evaluated at size      12 using    0 evals safe "_scanr1"
Evaluated at size      24 using    0 evals live "_qs)116"
Evaluated at size      24 using    0 evals live "_scanr1"
Evaluated at size      24 using    0 evals safe "_qs)116"
Evaluated at size      24 using    0 evals safe "_scanr1"

Function "_qs)116" has input domains:
   1) Func [Two,Two] Two
   2) Lift2 [Two]
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 2 [] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),UpUp2 [One]]]) (Min1Max0 2 [] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),UpUp2 [One]]]) [RepTwo (Min1Max0 2 [] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),UpUp2 [One]]])]


Function "_scanr1" has input domains:
   1) Func [Two,Two] Two
   2) Lift2 [Two]
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 2 [] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),UpUp2 [One]]]) (Min1Max0 2 [] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),UpUp2 [One]]]) [RepTwo (Min1Max0 2 [] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),UpUp2 [One]]])]


Domains for "_iterate" are
       4   [Two,Two]
       6   [Func [Two] Two,Two]

Evaluated at size       4 using    3 evals live "_iterate"
Evaluated at size       4 using    3 evals live "_iterate"
Evaluated at size       4 using    3 evals safe "_iterate"
Evaluated at size       6 using    0 evals live "_iterate"
Evaluated at size       6 using    0 evals safe "_iterate"

Function "_iterate" has input domains:
   1) Func [Two] Two
   2) Two
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Zero]] []) (Min1Max0 2 [] [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),One]]) [RepTwo (Min1Max0 2 [] [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),One]])]


Domains for "_xs" are
       2   [Two]

Evaluated at size       2 using    3 evals live "_xs"
Evaluated at size       2 using    3 evals live "_xs"
Evaluated at size       2 using    3 evals safe "_xs"

Function "_xs" has input domains:
   1) {0 1} (free "x")
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  
       2   |  
       1   |  0
       0   |  



Domains for "_repeat" are
       2   [Two]

Evaluated at size       2 using    3 evals safe "_repeat"
Evaluated at size       2 using    3 evals live "_repeat"

Function "_repeat" has input domains:
   1) {0 1}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  
       2   |  
       1   |  0
       0   |  



Domains for "_xss" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    3 evals live "_xss"
Evaluated at size       2 using    3 evals live "_xss"
Evaluated at size       2 using    3 evals safe "_xss"
Evaluated at size       4 using    2 evals live "_xss"
Evaluated at size       4 using    0 evals live "_xss"
Evaluated at size       4 using    0 evals safe "_xss"

Function "_xss" has input domains:
   1) {0 1 2 3} (free "xs")
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  
       2   |  
       1   |  1
       0   |  0



Domains for "_cycle" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    3 evals safe "_cycle"
Evaluated at size       2 using    3 evals live "_cycle"
Evaluated at size       4 using    2 evals safe "_cycle"
Evaluated at size       4 using    2 evals live "_cycle"

Function "_cycle" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  
       2   |  
       1   |  1
       0   |  0



Domains for "_if" are
       8   [Two,Two,Two]

Evaluated at size       8 using    6 evals safe "_if"
Evaluated at size       8 using    6 evals live "_if"

Function "_if" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1 and 1 1 0
       0   |  0 0 0



Domains for "_take" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_take"
Evaluated at size       4 using    6 evals live "_take"
Evaluated at size       4 using    6 evals safe "_take"
Evaluated at size       8 using    0 evals live "_take"
Evaluated at size       8 using    0 evals safe "_take"

Function "_take" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  1 0
       2   |  
       1   |  
       0   |  0 0



Domains for "_drop" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]

Evaluated at size       4 using    8 evals live "_drop"
Evaluated at size       4 using    8 evals live "_drop"
Evaluated at size       4 using    8 evals safe "_drop"
Evaluated at size       8 using    3 evals live "_drop"
Evaluated at size       8 using    2 evals live "_drop"
Evaluated at size       8 using    2 evals safe "_drop"

Function "_drop" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  1 2
       2   |  
       1   |  1 1
       0   |  0 0



Domains for "_splitAt" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]

Evaluated at size       4 using   11 evals live "_splitAt"
Evaluated at size       4 using   11 evals live "_splitAt"
Evaluated at size       4 using   11 evals safe "_splitAt"
Evaluated at size       8 using    3 evals live "_splitAt"
Evaluated at size       8 using    2 evals live "_splitAt"
Evaluated at size       8 using    2 evals safe "_splitAt"

Function "_splitAt" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {00 11 12 13 14 21 22 23 24 31 32 33 34 41 42 43 44}

   Output  |  Lower frontier
   --------+----------------
      44   |  1 2
      43   |  
      42   |  1 1
      41   |  1 0
      34   |  
      33   |  
      32   |  
      31   |  
      24   |  
      23   |  
      22   |  
      21   |  
      14   |  
      13   |  
      12   |  
      11   |  
      00   |  0 0



Domains for "_takeWhile" are
       4   [Two,Two]
       6   [Func [Two] Two,Two]
      12   [Func [Two] Two,Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_takeWhile"
Evaluated at size       4 using    6 evals live "_takeWhile"
Evaluated at size       4 using    6 evals safe "_takeWhile"
Evaluated at size       6 using    0 evals live "_takeWhile"
Evaluated at size       6 using    0 evals safe "_takeWhile"
Evaluated at size      12 using    7 evals live "_takeWhile"
Evaluated at size      12 using    3 evals live "_takeWhile"
Evaluated at size      12 using    3 evals safe "_takeWhile"

Function "_takeWhile" has input domains:
   1) Func [Two] Two
   2) Lift2 [Two]
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) [RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]])]


Domains for "_dropWhile" are
       4   [Two,Two]
       6   [Func [Two] Two,Two]
      12   [Func [Two] Two,Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_dropWhile"
Evaluated at size       4 using    6 evals live "_dropWhile"
Evaluated at size       4 using    6 evals safe "_dropWhile"
Evaluated at size       6 using    0 evals live "_dropWhile"
Evaluated at size       6 using    0 evals safe "_dropWhile"
Evaluated at size      12 using    8 evals live "_dropWhile"
Evaluated at size      12 using    5 evals live "_dropWhile"
Evaluated at size      12 using    5 evals safe "_dropWhile"

Function "_dropWhile" has input domains:
   1) Func [Two] Two
   2) Lift2 [Two]
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Up2]]) [RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Up2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),UpUp2 [Zero]]])]


Domains for "_span" are
       4   [Two,Two]
       6   [Func [Two] Two,Two]
      12   [Func [Two] Two,Lift2 [Two]]

Evaluated at size       4 using    9 evals live "_span"
Evaluated at size       4 using    9 evals live "_span"
Evaluated at size       4 using    9 evals safe "_span"
Evaluated at size       6 using    0 evals live "_span"
Evaluated at size       6 using    0 evals safe "_span"
Evaluated at size      12 using   11 evals live "_span"
Evaluated at size      12 using    8 evals live "_span"
Evaluated at size      12 using    8 evals safe "_span"

Function "_span" has input domains:
   1) Func [Two] Two
   2) Lift2 [Two]
   and output domain
      Lift1 [Lift2 [Two],Lift2 [Two]]

with value:

Rep1 (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) [Rep2 (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) [RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]])],Rep2 (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Up2]]) [RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Up2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),UpUp2 [Zero]]])]]


Domains for "_break" are
       4   [Two,Two]
       6   [Func [Two] Two,Two]
      12   [Func [Two] Two,Lift2 [Two]]

Evaluated at size       4 using    9 evals safe "_break"
Evaluated at size       4 using    9 evals live "_break"
Evaluated at size       6 using    0 evals safe "_break"
Evaluated at size       6 using    0 evals live "_break"
Evaluated at size      12 using   11 evals safe "_break"
Evaluated at size      12 using   11 evals live "_break"

Function "_break" has input domains:
   1) Func [Two] Two
   2) Lift2 [Two]
   and output domain
      Lift1 [Lift2 [Two],Lift2 [Two]]

with value:

Rep1 (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) [Rep2 (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) [RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]])],Rep2 (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Stop2]]) (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Up2]]) [RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Up2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),UpUp2 [Zero]]])]]


Domains for "__sc)172" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "__sc)172"
Evaluated at size       4 using    4 evals live "__sc)172"

Function "__sc)172" has input domains:
   1) {0 1} (free "x")
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_nub" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals live "_nub"
Evaluated at size       2 using    4 evals live "_nub"
Evaluated at size       2 using    4 evals safe "_nub"
Evaluated at size       4 using    2 evals live "_nub"
Evaluated at size       4 using    2 evals live "_nub"
Evaluated at size       4 using    2 evals safe "_nub"

Function "_nub" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  1
       0   |  0



Domains for "_reverseInto" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]
      16   [Lift2 [Two],Lift2 [Two]]

Evaluated at size       4 using    8 evals live "_reverseInto"
Evaluated at size       4 using    8 evals live "_reverseInto"
Evaluated at size       4 using    6 evals safe "_reverseInto"
Evaluated at size       4 using    6 evals safe "_reverseInto"
Evaluated at size       8 using    3 evals live "_reverseInto"
Evaluated at size       8 using    3 evals live "_reverseInto"
Evaluated at size       8 using    2 evals live "_reverseInto"
Evaluated at size       8 using    2 evals safe "_reverseInto"
Evaluated at size      16 using    7 evals live "_reverseInto"
Evaluated at size      16 using    3 evals live "_reverseInto"
Evaluated at size      16 using    3 evals safe "_reverseInto"

Function "_reverseInto" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3 3
       2   |  2 2
       1   |  0 2
       0   |  0 0



Domains for "_reverse" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals safe "_reverse"
Evaluated at size       2 using    4 evals live "_reverse"
Evaluated at size       4 using    3 evals safe "_reverse"
Evaluated at size       4 using    3 evals live "_reverse"

Function "_reverse" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  
       0   |  0



Domains for "__sc)181" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "__sc)181"
Evaluated at size       4 using    4 evals live "__sc)181"

Function "__sc)181" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_and" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals safe "_and"
Evaluated at size       2 using    2 evals live "_and"
Evaluated at size       4 using    1 evals safe "_and"
Evaluated at size       4 using    1 evals live "_and"

Function "_and" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Domains for "__sc)185" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "__sc)185"
Evaluated at size       4 using    4 evals live "__sc)185"

Function "__sc)185" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_or" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals safe "_or"
Evaluated at size       2 using    2 evals live "_or"
Evaluated at size       4 using    1 evals safe "_or"
Evaluated at size       4 using    1 evals live "_or"

Function "_or" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Domains for "_any" are
       4   [Two,Two]
       6   [Func [Two] Two,Two]
      12   [Func [Two] Two,Lift2 [Two]]

Evaluated at size       4 using    4 evals safe "_any"
Evaluated at size       4 using    4 evals live "_any"
Evaluated at size       6 using    0 evals safe "_any"
Evaluated at size       6 using    0 evals live "_any"
Evaluated at size      12 using    4 evals safe "_any"
Evaluated at size      12 using    4 evals live "_any"

Function "_any" has input domains:
   1) Func [Two] Two
   2) Lift2 [Two]
   and output domain
      Two

with value:

RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Up2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),UpUp2 [Zero]]])


Domains for "_all" are
       4   [Two,Two]
       6   [Func [Two] Two,Two]
      12   [Func [Two] Two,Lift2 [Two]]

Evaluated at size       4 using    4 evals safe "_all"
Evaluated at size       4 using    4 evals live "_all"
Evaluated at size       6 using    0 evals safe "_all"
Evaluated at size       6 using    0 evals live "_all"
Evaluated at size      12 using    4 evals safe "_all"
Evaluated at size      12 using    4 evals live "_all"

Function "_all" has input domains:
   1) Func [Two] Two
   2) Lift2 [Two]
   and output domain
      Two

with value:

RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Up2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),UpUp2 [Zero]]])


Domains for "__sc)193" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "__sc)193"
Evaluated at size       4 using    4 evals live "__sc)193"

Function "__sc)193" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_elem" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]

Evaluated at size       4 using    4 evals safe "_elem"
Evaluated at size       4 using    4 evals live "_elem"
Evaluated at size       8 using    2 evals safe "_elem"
Evaluated at size       8 using    2 evals live "_elem"

Function "_elem" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 1 and 1 0
       0   |  0 0



Domains for "__sc)197" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "__sc)197"
Evaluated at size       4 using    4 evals live "__sc)197"

Function "__sc)197" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_notElem" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]

Evaluated at size       4 using    4 evals safe "_notElem"
Evaluated at size       4 using    4 evals live "_notElem"
Evaluated at size       8 using    2 evals safe "_notElem"
Evaluated at size       8 using    2 evals live "_notElem"

Function "_notElem" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 1 and 1 0
       0   |  0 0



Domains for "__sc)201" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "__sc)201"
Evaluated at size       4 using    4 evals live "__sc)201"

Function "__sc)201" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_sum" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals safe "_sum"
Evaluated at size       2 using    2 evals live "_sum"
Evaluated at size       4 using    1 evals safe "_sum"
Evaluated at size       4 using    1 evals live "_sum"

Function "_sum" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Domains for "__sc)205" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "__sc)205"
Evaluated at size       4 using    4 evals live "__sc)205"

Function "__sc)205" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_product" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals safe "_product"
Evaluated at size       2 using    2 evals live "_product"
Evaluated at size       4 using    1 evals safe "_product"
Evaluated at size       4 using    1 evals live "_product"

Function "_product" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Domains for "__sc)209" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "__sc)209"
Evaluated at size       4 using    4 evals live "__sc)209"

Function "__sc)209" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_sums" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    3 evals safe "_sums"
Evaluated at size       2 using    3 evals live "_sums"
Evaluated at size       4 using    2 evals safe "_sums"
Evaluated at size       4 using    2 evals live "_sums"

Function "_sums" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  0
       0   |  



Domains for "__sc)213" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "__sc)213"
Evaluated at size       4 using    4 evals live "__sc)213"

Function "__sc)213" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_products" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    3 evals safe "_products"
Evaluated at size       2 using    3 evals live "_products"
Evaluated at size       4 using    2 evals safe "_products"
Evaluated at size       4 using    2 evals live "_products"

Function "_products" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  0
       0   |  



Domains for "_maximum" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals safe "_maximum"
Evaluated at size       2 using    2 evals live "_maximum"
Evaluated at size       4 using    1 evals safe "_maximum"
Evaluated at size       4 using    1 evals live "_maximum"

Function "_maximum" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Domains for "_minimum" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals safe "_minimum"
Evaluated at size       2 using    2 evals live "_minimum"
Evaluated at size       4 using    1 evals safe "_minimum"
Evaluated at size       4 using    1 evals live "_minimum"

Function "_minimum" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Domains for "_concat" are
       2   [Two]
       4   [Lift2 [Two]]
       6   [Lift2 [Lift2 [Two]]]

Evaluated at size       2 using    4 evals safe "_concat"
Evaluated at size       2 using    4 evals live "_concat"
Evaluated at size       4 using    3 evals safe "_concat"
Evaluated at size       4 using    3 evals live "_concat"
Evaluated at size       6 using    2 evals safe "_concat"
Evaluated at size       6 using    2 evals live "_concat"

Function "_concat" has input domains:
   1) {0 1 2 3 4 5}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  5
       2   |  4
       1   |  1
       0   |  0



Domains for "_zipWith" are
       8   [Two,Two,Two]
      24   [Func [Two,Two] Two,Two,Two]
      48   [Func [Two,Two] Two,Two,Lift2 [Two]]
      96   [Func [Two,Two] Two,Lift2 [Two],Lift2 [Two]]

Evaluated at size       8 using    8 evals live "_zipWith"
Evaluated at size       8 using    8 evals live "_zipWith"
Evaluated at size       8 using    8 evals safe "_zipWith"
Evaluated at size      24 using    0 evals live "_zipWith"
Evaluated at size      24 using    0 evals safe "_zipWith"
Evaluated at size      48 using    0 evals live "_zipWith"
Evaluated at size      48 using    0 evals safe "_zipWith"
Evaluated at size      96 using   34 evals live "_zipWith"
Evaluated at size      96 using   17 evals live "_zipWith"
Evaluated at size      96 using    8 evals live "_zipWith"
Evaluated at size      96 using    8 evals safe "_zipWith"

Function "_zipWith" has input domains:
   1) Func [Two,Two] Two
   2) Lift2 [Two]
   3) Lift2 [Two]
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Up2,Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),UpUp2 [One],Stop2]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Stop2,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),UpUp2 [Zero],Stop2]]) (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Up2,UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),UpUp2 [Zero],Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),UpUp2 [One],Stop2]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Stop2,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Up2,Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),UpUp2 [Zero],Stop2]]) [RepTwo (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Up2,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),UpUp2 [One],Stop2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),UpUp2 [Zero],Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),Up2,UpUp2 [Zero]]] [MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Stop2,UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Up2,Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),UpUp2 [Zero],Stop2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),Up2,UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),UpUp2 [Zero],Up2],MkFrel [Rep (RepTwo (Min1Max0 2 [MkFrel [One,One]] [MkFrel [Zero,One],MkFrel [One,Zero]])),UpUp2 [Zero],UpUp2 [Zero]]])]


Domains for "__sc)228" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]
      12   [Two,Lift2 [Lift2 [Two]]]
      24   [Lift2 [Two],Lift2 [Lift2 [Two]]]

Evaluated at size       4 using    8 evals safe "__sc)228"
Evaluated at size       4 using    8 evals live "__sc)228"
Evaluated at size       8 using    0 evals safe "__sc)228"
Evaluated at size       8 using    0 evals live "__sc)228"
Evaluated at size      12 using    0 evals safe "__sc)228"
Evaluated at size      12 using    0 evals live "__sc)228"
Evaluated at size      24 using   14 evals safe "__sc)228"
Evaluated at size      24 using   14 evals live "__sc)228"

Function "__sc)228" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3 4 5}
   and output domain
      {0 1 2 3 4 5}

   Output  |  Lower frontier
   --------+----------------
       5   |  3 0
       4   |  2 1
       3   |  
       2   |  
       1   |  1 1
       0   |  0 0



Domains for "_transpose" are
       2   [Two]
       4   [Lift2 [Two]]
       6   [Lift2 [Lift2 [Two]]]

Evaluated at size       2 using    6 evals safe "_transpose"
Evaluated at size       2 using    6 evals live "_transpose"
Evaluated at size       4 using    2 evals safe "_transpose"
Evaluated at size       4 using    2 evals live "_transpose"
Evaluated at size       6 using    0 evals safe "_transpose"
Evaluated at size       6 using    0 evals live "_transpose"

Function "_transpose" has input domains:
   1) {0 1 2 3 4 5}
   and output domain
      {0 1 2 3 4 5}

   Output  |  Lower frontier
   --------+----------------
       5   |  1
       4   |  
       3   |  
       2   |  
       1   |  
       0   |  0



Domains for "__sc)232" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "__sc)232"
Evaluated at size       4 using    4 evals live "__sc)232"

Function "__sc)232" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {00 11 12 21 22}

   Output  |  Lower frontier
   --------+----------------
      22   |  1 1
      21   |  1 0
      12   |  0 1
      11   |  0 0
      00   |  



Domains for "_zip" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]
      16   [Lift2 [Two],Lift2 [Two]]

Evaluated at size       4 using    7 evals safe "_zip"
Evaluated at size       4 using    7 evals live "_zip"
Evaluated at size       8 using    7 evals safe "_zip"
Evaluated at size       8 using    7 evals live "_zip"
Evaluated at size      16 using    5 evals safe "_zip"
Evaluated at size      16 using    5 evals live "_zip"

Function "_zip" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3}
   and output domain
      {00 11 22 33 34 43 44}

   Output  |  Lower frontier
   --------+----------------
      44   |  1 3 and 2 2 and 3 0
      43   |  1 2
      34   |  2 1
      33   |  
      22   |  
      11   |  1 1
      00   |  0 0



Domains for "_backMap" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]
      10   [Lift2 [Func [Two] Two],Two]

Evaluated at size       4 using    6 evals live "_backMap"
Evaluated at size       4 using    6 evals live "_backMap"
Evaluated at size       4 using    6 evals safe "_backMap"
Evaluated at size       8 using    4 evals live "_backMap"
Evaluated at size       8 using    2 evals live "_backMap"
Evaluated at size       8 using    2 evals safe "_backMap"
Evaluated at size      10 using    2 evals live "_backMap"
Evaluated at size      10 using    1 evals live "_backMap"
Evaluated at size      10 using    1 evals safe "_backMap"

Function "_backMap" has input domains:
   1) Lift2 [Func [Two] Two]
   2) Two
   and output domain
      Lift2 [Two]

with value:

Rep2 (Min1Max0 2 [MkFrel [Up2,Zero]] [MkFrel [Stop2,One]]) (Min1Max0 2 [MkFrel [UpUp2 [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]]))],Zero]] [MkFrel [Up2,One]]) [RepTwo (Min1Max0 2 [MkFrel [UpUp2 [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] []))],Zero],MkFrel [UpUp2 [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]]))],One]] [MkFrel [UpUp2 [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]]))],One],MkFrel [UpUp2 [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]]))],Zero]])]


Function "_g" is a constant point 3 in domain 
    {0 1 2 3}


Domains for "_add1" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_add1"
Evaluated at size       2 using    2 evals live "_add1"

Function "_add1" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_hof" are
       4   [Two,Two]
       6   [Func [Two] Two,Two]

Evaluated at size       4 using    4 evals safe "_hof"
Evaluated at size       4 using    4 evals live "_hof"
Evaluated at size       6 using    2 evals safe "_hof"
Evaluated at size       6 using    2 evals live "_hof"

Function "_hof" has input domains:
   1) Func [Two] Two
   2) Two
   and output domain
      Two

with value:

RepTwo (Min1Max0 2 [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Zero],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),One]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),One],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Zero]])


Domains for "_id" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_id"
Evaluated at size       2 using    2 evals live "_id"

Function "_id" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Function "_useHOF" is a constant point 1 in domain 
    {0 1}


Function "_loop)251" is a constant point 0 in domain 
    {0 1}


Domains for "_nasty" are
       2   [Two]

Evaluated at size       2 using    1 evals safe "_nasty"
Evaluated at size       2 using    1 evals live "_nasty"

Function "_nasty" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  
       0   |  0



Domains for "_concat2" are
       2   [Two]
       4   [Lift2 [Two]]
       6   [Lift2 [Lift2 [Two]]]

Evaluated at size       2 using    4 evals safe "_concat2"
Evaluated at size       2 using    4 evals live "_concat2"
Evaluated at size       4 using    3 evals safe "_concat2"
Evaluated at size       4 using    3 evals live "_concat2"
Evaluated at size       6 using    2 evals safe "_concat2"
Evaluated at size       6 using    2 evals live "_concat2"

Function "_concat2" has input domains:
   1) {0 1 2 3 4 5}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  5
       2   |  4
       1   |  1
       0   |  0



Domains for "_add)254" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_add)254"
Evaluated at size       4 using    4 evals live "_add)254"

Function "_add)254" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_sum2" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals safe "_sum2"
Evaluated at size       2 using    2 evals live "_sum2"
Evaluated at size       4 using    1 evals safe "_sum2"
Evaluated at size       4 using    1 evals live "_sum2"

Function "_sum2" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Domains for "_hd" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals safe "_hd"
Evaluated at size       2 using    2 evals live "_hd"
Evaluated at size       4 using    2 evals safe "_hd"
Evaluated at size       4 using    2 evals live "_hd"

Function "_hd" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_rev)263" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]
      16   [Lift2 [Two],Lift2 [Two]]

Evaluated at size       4 using    8 evals live "_rev)263"
Evaluated at size       4 using    8 evals live "_rev)263"
Evaluated at size       4 using    6 evals safe "_rev)263"
Evaluated at size       4 using    6 evals safe "_rev)263"
Evaluated at size       8 using    3 evals live "_rev)263"
Evaluated at size       8 using    3 evals live "_rev)263"
Evaluated at size       8 using    2 evals live "_rev)263"
Evaluated at size       8 using    2 evals safe "_rev)263"
Evaluated at size      16 using    7 evals live "_rev)263"
Evaluated at size      16 using    3 evals live "_rev)263"
Evaluated at size      16 using    3 evals safe "_rev)263"

Function "_rev)263" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3 3
       2   |  2 2
       1   |  0 2
       0   |  0 0



Domains for "_reverse_into" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals safe "_reverse_into"
Evaluated at size       2 using    4 evals live "_reverse_into"
Evaluated at size       4 using    3 evals safe "_reverse_into"
Evaluated at size       4 using    3 evals live "_reverse_into"

Function "_reverse_into" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  
       0   |  0



Function "_f" is a constant point 1 in domain 
    {0 1}


Function "_funcList" is a higher-order constant (yuck) in domain

Lift2 [Func [Two] Two]

of value

UpUp2 [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]]))]


Function "_g1" is a constant point 3 in domain 
    {0 1 2 3}


Domains for "_dot)276" are
       8   [Two,Two,Two]
      12   [Func [Two] Two,Two,Two]
      18   [Func [Two] Two,Func [Two] Two,Two]

Evaluated at size       8 using    5 evals safe "_dot)276"
Evaluated at size       8 using    5 evals live "_dot)276"
Evaluated at size      12 using    4 evals safe "_dot)276"
Evaluated at size      12 using    4 evals live "_dot)276"
Evaluated at size      18 using    2 evals safe "_dot)276"
Evaluated at size      18 using    2 evals live "_dot)276"

Function "_dot)276" has input domains:
   1) Func [Two] Two
   2) Func [Two] Two
   3) Two
   and output domain
      Two

with value:

RepTwo (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Zero],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Zero],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),One]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),One],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),One],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Zero]])


Domains for "_areInverses" are
      16   [Two,Two,Two,Two]
      24   [Func [Two] Two,Two,Two,Two]
      36   [Func [Two] Two,Func [Two] Two,Two,Two]
     108   [Func [Two] Two,Func [Two] Two,Func [Two,Two] Two,Two]

Evaluated at size      16 using   10 evals safe "_areInverses"
Evaluated at size      16 using   10 evals live "_areInverses"
Evaluated at size      24 using    0 evals safe "_areInverses"
Evaluated at size      24 using    0 evals live "_areInverses"
Evaluated at size      36 using    0 evals safe "_areInverses"
Evaluated at size      36 using    0 evals live "_areInverses"
Evaluated at size     108 using   33 evals safe "_areInverses"
Evaluated at size     108 using   33 evals live "_areInverses"

Function "_areInverses" has input domains:
   1) Func [Two] Two
   2) Func [Two] Two
   3) Func [Two,Two] Two
   4) Two
   and output domain
      Two

with value:

RepTwo (Min1Max0 4 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),Zero],MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),One],MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),Zero],MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Rep (RepTwo (Min1Max0 2 [MkFrel [One,One]] [MkFrel [Zero,One],MkFrel [One,Zero]])),One],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),Zero],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 2 [MkFrel [One,One]] [MkFrel [Zero,One],MkFrel [One,Zero]])),One]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),One],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One]] [MkFrel [One,Zero]])),One],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Rep (RepTwo (Min1Max0 1 [] [MkFrel [One]])),Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One],MkFrel [One,Zero]] [MkFrel [Zero,Zero]])),Zero],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),One],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Rep (RepTwo (Min1Max0 1 [MkFrel [Zero]] [])),Rep (RepTwo (Min1Max0 2 [MkFrel [One,Zero]] [MkFrel [Zero,One]])),Zero],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]])),Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,One],MkFrel [One,Zero]] [MkFrel [Zero,Zero]])),Zero]])


Domains for "_add)284" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_add)284"
Evaluated at size       4 using    4 evals live "_add)284"

Function "_add)284" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_eq" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_eq"
Evaluated at size       4 using    4 evals live "_eq"

Function "_eq" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_sub" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_sub"
Evaluated at size       4 using    4 evals live "_sub"

Function "_sub" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Function "_testInverses" is a constant point 1 in domain 
    {0 1}


Domains for "_intsFrom" are
       2   [Two]

Evaluated at size       2 using    3 evals live "_intsFrom"
Evaluated at size       2 using    3 evals live "_intsFrom"
Evaluated at size       2 using    3 evals safe "_intsFrom"

Function "_intsFrom" has input domains:
   1) {0 1}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  
       2   |  
       1   |  0
       0   |  



Function "_loop)294" is a constant point 0 in domain 
    {0 1}


Domains for "_interesting" are
       2   [Two]

Evaluated at size       2 using    1 evals safe "_interesting"
Evaluated at size       2 using    1 evals live "_interesting"

Function "_interesting" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  
       0   |  0



Domains for "_add2" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_add2"
Evaluated at size       2 using    2 evals live "_add2"

Function "_add2" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_fac" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals live "_fac"
Evaluated at size       4 using    4 evals live "_fac"
Evaluated at size       4 using    4 evals safe "_fac"

Function "_fac" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_fact" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_fact"
Evaluated at size       2 using    2 evals live "_fact"

Function "_fact" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_f2231" are
       8   [Two,Two,Two]

Evaluated at size       8 using    5 evals live "_f2231"
Evaluated at size       8 using    6 evals live "_f2231"
Evaluated at size       8 using    6 evals live "_f2231"
Evaluated at size       8 using    6 evals safe "_f2231"

Function "_f2231" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 1 0
       0   |  0 0 0



Domains for "_ff" are
       8   [Two,Two,Two]
      16   [Two,Two,Lift2 [Two]]

Evaluated at size       8 using    6 evals safe "_ff"
Evaluated at size       8 using    6 evals live "_ff"
Evaluated at size      16 using    2 evals safe "_ff"
Evaluated at size      16 using    2 evals live "_ff"

Function "_ff" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1
       0   |  0 0 0



Domains for "_f223" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals live "_f223"
Evaluated at size       4 using    4 evals live "_f223"
Evaluated at size       4 using    4 evals safe "_f223"

Function "_f223" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_rf" are
       4   [Two,Two]


Domains for "_rg" are
       4   [Two,Two]

Evaluated at size       4 using    1 evals live "_rf"
Evaluated at size       4 using    4 evals live "_rg"
Evaluated at size       4 using    4 evals live "_rf"
Evaluated at size       4 using    4 evals live "_rg"
Evaluated at size       4 using    4 evals live "_rf"
Evaluated at size       4 using    4 evals live "_rg"
Evaluated at size       4 using    4 evals safe "_rf"
Evaluated at size       4 using    4 evals safe "_rg"

Function "_rf" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 1
       0   |  0 0



Function "_rg" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 1
       0   |  0 0



Domains for "_sq" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_sq"
Evaluated at size       2 using    2 evals live "_sq"

Function "_sq" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_nnn" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_nnn"
Evaluated at size       2 using    2 evals live "_nnn"

Function "_nnn" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0
       0   |  



Domains for "_f2232" are
      16   [Two,Two,Two,Two]

Evaluated at size      16 using    6 evals live "_f2232"
Evaluated at size      16 using    7 evals live "_f2232"
Evaluated at size      16 using    6 evals live "_f2232"
Evaluated at size      16 using    5 evals live "_f2232"
Evaluated at size      16 using    5 evals live "_f2232"
Evaluated at size      16 using    5 evals safe "_f2232"

Function "_f2232" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 0 0 1
       0   |  0 0 0 0



Domains for "_hudak" are
      32   [Two,Two,Two,Two,Two]

Evaluated at size      32 using   12 evals live "_hudak"
Evaluated at size      32 using   10 evals live "_hudak"
Evaluated at size      32 using    6 evals live "_hudak"
Evaluated at size      32 using    6 evals live "_hudak"
Evaluated at size      32 using    6 evals safe "_hudak"

Function "_hudak" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 0 0 1 0
       0   |  0 0 0 0 0



Domains for "_fa" are
       2   [Two]
       4   [Lift2 [Two]]


Domains for "_fb" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals live "_fa"
Evaluated at size       2 using    2 evals live "_fb"
Evaluated at size       2 using    2 evals live "_fa"
Evaluated at size       2 using    2 evals live "_fb"
Evaluated at size       2 using    2 evals safe "_fa"
Evaluated at size       2 using    2 evals safe "_fb"
Evaluated at size       4 using    1 evals live "_fa"
Evaluated at size       4 using    1 evals live "_fb"
Evaluated at size       4 using    1 evals safe "_fa"
Evaluated at size       4 using    1 evals safe "_fb"

Function "_fa" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Function "_fb" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Domains for "_z4" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]
      16   [Lift2 [Two],Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_z4"
Evaluated at size       4 using    6 evals live "_z4"
Evaluated at size       4 using    6 evals safe "_z4"
Evaluated at size       8 using    6 evals live "_z4"
Evaluated at size       8 using    3 evals live "_z4"
Evaluated at size       8 using    3 evals safe "_z4"
Evaluated at size      16 using    4 evals live "_z4"
Evaluated at size      16 using    2 evals live "_z4"
Evaluated at size      16 using    2 evals safe "_z4"

Function "_z4" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  1 3 and 3 0
       2   |  1 2 and 2 1
       1   |  1 1
       0   |  0 0



Domains for "_z6" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]
      12   [Two,Lift2 [Lift2 [Two]]]
      24   [Lift2 [Two],Lift2 [Lift2 [Two]]]
      36   [Lift2 [Lift2 [Two]],Lift2 [Lift2 [Two]]]

Evaluated at size       4 using    8 evals live "_z6"
Evaluated at size       4 using    8 evals live "_z6"
Evaluated at size       4 using    8 evals safe "_z6"
Evaluated at size       8 using    0 evals live "_z6"
Evaluated at size       8 using    0 evals safe "_z6"
Evaluated at size      12 using    0 evals live "_z6"
Evaluated at size      12 using    0 evals safe "_z6"
Evaluated at size      24 using   12 evals live "_z6"
Evaluated at size      24 using   10 evals live "_z6"
Evaluated at size      24 using    6 evals live "_z6"
Evaluated at size      24 using    6 evals safe "_z6"
Evaluated at size      36 using    8 evals live "_z6"
Evaluated at size      36 using    5 evals live "_z6"
Evaluated at size      36 using    5 evals safe "_z6"

Function "_z6" has input domains:
   1) {0 1 2 3 4 5}
   2) {0 1 2 3 4 5}
   and output domain
      {0 1 2 3 4 5}

   Output  |  Lower frontier
   --------+----------------
       5   |  1 2 and 3 1 and 5 0
       4   |  
       3   |  
       2   |  2 1
       1   |  1 1
       0   |  0 0



Domains for "_z8" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]
      12   [Two,Lift2 [Lift2 [Two]]]
      16   [Two,Lift2 [Lift2 [Lift2 [Two]]]]
      32   [Lift2 [Two],Lift2 [Lift2 [Lift2 [Two]]]]
      48   [Lift2 [Lift2 [Two]],Lift2 [Lift2 [Lift2 [Two]]]]
      64   [Lift2 [Lift2 [Lift2 [Two]]],Lift2 [Lift2 [Lift2 [Two]]]]

Evaluated at size       4 using   10 evals live "_z8"
Evaluated at size       4 using   10 evals live "_z8"
Evaluated at size       4 using   10 evals safe "_z8"
Evaluated at size       8 using    0 evals live "_z8"
Evaluated at size       8 using    0 evals safe "_z8"
Evaluated at size      12 using    0 evals live "_z8"
Evaluated at size      12 using    0 evals safe "_z8"
Evaluated at size      16 using    0 evals live "_z8"
Evaluated at size      16 using    0 evals safe "_z8"
Evaluated at size      32 using   14 evals live "_z8"
Evaluated at size      32 using   13 evals live "_z8"
Evaluated at size      32 using    8 evals live "_z8"
Evaluated at size      32 using    8 evals safe "_z8"
Evaluated at size      48 using   10 evals live "_z8"
Evaluated at size      48 using    7 evals live "_z8"
Evaluated at size      48 using    7 evals safe "_z8"
Evaluated at size      64 using    7 evals live "_z8"
Evaluated at size      64 using    7 evals safe "_z8"

Function "_z8" has input domains:
   1) {0 1 2 3 4 5 6 7}
   2) {0 1 2 3 4 5 6 7}
   and output domain
      {0 1 2 3 4 5 6 7}

   Output  |  Lower frontier
   --------+----------------
       7   |  1 2 and 3 1 and 7 0
       6   |  
       5   |  
       4   |  
       3   |  
       2   |  2 1
       1   |  1 1
       0   |  0 0



Domains for "_z10" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]
      12   [Two,Lift2 [Lift2 [Two]]]
      16   [Two,Lift2 [Lift2 [Lift2 [Two]]]]
      20   [Two,Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]
      40   [Lift2 [Two],Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]
      60   [Lift2 [Lift2 [Two]],Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]
      80   [Lift2 [Lift2 [Lift2 [Two]]],Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]
     100   [Lift2 [Lift2 [Lift2 [Lift2 [Two]]]],Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]

Evaluated at size       4 using   12 evals live "_z10"
Evaluated at size       4 using   12 evals live "_z10"
Evaluated at size       4 using   12 evals safe "_z10"
Evaluated at size       8 using    0 evals live "_z10"
Evaluated at size       8 using    0 evals safe "_z10"
Evaluated at size      12 using    0 evals live "_z10"
Evaluated at size      12 using    0 evals safe "_z10"
Evaluated at size      16 using    0 evals live "_z10"
Evaluated at size      16 using    0 evals safe "_z10"
Evaluated at size      20 using    0 evals live "_z10"
Evaluated at size      20 using    0 evals safe "_z10"
Evaluated at size      40 using   16 evals live "_z10"
Evaluated at size      40 using   15 evals live "_z10"
Evaluated at size      40 using   10 evals live "_z10"
Evaluated at size      40 using   10 evals safe "_z10"
Evaluated at size      60 using   12 evals live "_z10"
Evaluated at size      60 using    9 evals live "_z10"
Evaluated at size      60 using    9 evals safe "_z10"
Evaluated at size      80 using    9 evals live "_z10"
Evaluated at size      80 using    9 evals safe "_z10"
Evaluated at size     100 using    9 evals live "_z10"
Evaluated at size     100 using    9 evals safe "_z10"

Function "_z10" has input domains:
   1) {0 1 2 3 4 5 6 7 8 9}
   2) {0 1 2 3 4 5 6 7 8 9}
   and output domain
      {0 1 2 3 4 5 6 7 8 9}

   Output  |  Lower frontier
   --------+----------------
       9   |  1 2 and 3 1 and 9 0
       8   |  
       7   |  
       6   |  
       5   |  
       4   |  
       3   |  
       2   |  2 1
       1   |  1 1
       0   |  0 0



Domains for "_swap" are
       2   [Two]
       5   [Lift1 [Two,Two]]

Evaluated at size       2 using    3 evals safe "_swap"
Evaluated at size       2 using    3 evals live "_swap"
Evaluated at size       5 using    3 evals safe "_swap"
Evaluated at size       5 using    3 evals live "_swap"

Function "_swap" has input domains:
   1) {00 11 12 21 22}
   and output domain
      {00 11 12 21 22}

   Output  |  Lower frontier
   --------+----------------
      22   |  22
      21   |  12
      12   |  21
      11   |  11
      00   |  00



Domains for "_dupFirstOfPair" are
       2   [Two]
       5   [Lift1 [Two,Two]]

Evaluated at size       2 using    3 evals safe "_dupFirstOfPair"
Evaluated at size       2 using    3 evals live "_dupFirstOfPair"
Evaluated at size       5 using    3 evals safe "_dupFirstOfPair"
Evaluated at size       5 using    3 evals live "_dupFirstOfPair"

Function "_dupFirstOfPair" has input domains:
   1) {00 11 12 21 22}
   and output domain
      {00 11 12 21 22}

   Output  |  Lower frontier
   --------+----------------
      22   |  21
      21   |  
      12   |  
      11   |  11
      00   |  00



Domains for "_makePair" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_makePair"
Evaluated at size       2 using    2 evals live "_makePair"

Function "_makePair" has input domains:
   1) {0 1}
   and output domain
      {00 11 12 21 22}

   Output  |  Lower frontier
   --------+----------------
      22   |  1
      21   |  
      12   |  
      11   |  0
      00   |  



Function "_loop)383" is a constant point 0 in domain 
    {0 1}


Function "_makeBPair1" is a constant point 11 in domain 
    {00 11 12 21 22}


Function "_loop1" is a constant point 0 in domain 
    {0 1}


Function "_loop2" is a constant point 0 in domain 
    {0 1}


Function "_makeBPair2" is a constant point 11 in domain 
    {00 11 12 21 22}


Domains for "_glb" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_glb"
Evaluated at size       4 using    4 evals live "_glb"

Function "_glb" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 1 and 1 0
       0   |  0 0



Domains for "_zip2" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]
      16   [Lift2 [Two],Lift2 [Two]]

Evaluated at size       4 using    7 evals live "_zip2"
Evaluated at size       4 using    7 evals live "_zip2"
Evaluated at size       4 using    7 evals safe "_zip2"
Evaluated at size       8 using    7 evals live "_zip2"
Evaluated at size       8 using    4 evals live "_zip2"
Evaluated at size       8 using    4 evals safe "_zip2"
Evaluated at size      16 using    5 evals live "_zip2"
Evaluated at size      16 using    4 evals live "_zip2"
Evaluated at size      16 using    4 evals safe "_zip2"

Function "_zip2" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3}
   and output domain
      {00 11 22 33 34 43 44}

   Output  |  Lower frontier
   --------+----------------
      44   |  1 3 and 2 2 and 3 0
      43   |  1 2
      34   |  2 1
      33   |  
      22   |  
      11   |  1 1
      00   |  0 0



Function "_loop)398" is a constant point 0 in domain 
    {0 1}


Domains for "_likeAppend" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]
      16   [Lift2 [Two],Lift2 [Two]]

Evaluated at size       4 using    7 evals safe "_likeAppend"
Evaluated at size       4 using    7 evals live "_likeAppend"
Evaluated at size       8 using    3 evals safe "_likeAppend"
Evaluated at size       8 using    3 evals live "_likeAppend"
Evaluated at size      16 using    6 evals safe "_likeAppend"
Evaluated at size      16 using    6 evals live "_likeAppend"

Function "_likeAppend" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  1 3
       2   |  1 2
       1   |  1 0
       0   |  0 0



Domains for "_split" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    7 evals live "_split"
Evaluated at size       2 using    7 evals live "_split"
Evaluated at size       2 using    7 evals safe "_split"
Evaluated at size       4 using    7 evals live "_split"
Evaluated at size       4 using    6 evals live "_split"
Evaluated at size       4 using    6 evals safe "_split"

Function "_split" has input domains:
   1) {0 1 2 3}
   and output domain
      {00 11 12 13 14 21 22 23 24 31 32 33 34 41 42 43 44}

   Output  |  Lower frontier
   --------+----------------
      44   |  2
      43   |  
      42   |  
      41   |  
      34   |  
      33   |  
      32   |  
      31   |  
      24   |  
      23   |  
      22   |  
      21   |  
      14   |  
      13   |  
      12   |  
      11   |  
      00   |  0



Domains for "_minC" are
       4   [Two,Two]
      10   [Lift1 [Two,Two],Two]
      25   [Lift1 [Two,Two],Lift1 [Two,Two]]

Evaluated at size       4 using    6 evals safe "_minC"
Evaluated at size       4 using    6 evals live "_minC"
Evaluated at size      10 using    3 evals safe "_minC"
Evaluated at size      10 using    3 evals live "_minC"
Evaluated at size      25 using    5 evals safe "_minC"
Evaluated at size      25 using    5 evals live "_minC"

Function "_minC" has input domains:
   1) {00 11 12 21 22}
   2) {00 11 12 21 22}
   and output domain
      {00 11 12 21 22}

   Output  |  Lower frontier
   --------+----------------
      22   |  22 22
      21   |  21 21
      12   |  12 12
      11   |  11 11
      00   |  00 00



Domains for "_mulC" are
       4   [Two,Two]
      10   [Lift1 [Two,Two],Two]
      25   [Lift1 [Two,Two],Lift1 [Two,Two]]

Evaluated at size       4 using    6 evals safe "_mulC"
Evaluated at size       4 using    6 evals live "_mulC"
Evaluated at size      10 using    3 evals safe "_mulC"
Evaluated at size      10 using    3 evals live "_mulC"
Evaluated at size      25 using    3 evals safe "_mulC"
Evaluated at size      25 using    3 evals live "_mulC"

Function "_mulC" has input domains:
   1) {00 11 12 21 22}
   2) {00 11 12 21 22}
   and output domain
      {00 11 12 21 22}

   Output  |  Lower frontier
   --------+----------------
      22   |  22 22
      21   |  
      12   |  
      11   |  11 11
      00   |  00 00



Domains for "_plusC" are
       4   [Two,Two]
      10   [Lift1 [Two,Two],Two]
      25   [Lift1 [Two,Two],Lift1 [Two,Two]]

Evaluated at size       4 using    6 evals safe "_plusC"
Evaluated at size       4 using    6 evals live "_plusC"
Evaluated at size      10 using    3 evals safe "_plusC"
Evaluated at size      10 using    3 evals live "_plusC"
Evaluated at size      25 using    5 evals safe "_plusC"
Evaluated at size      25 using    5 evals live "_plusC"

Function "_plusC" has input domains:
   1) {00 11 12 21 22}
   2) {00 11 12 21 22}
   and output domain
      {00 11 12 21 22}

   Output  |  Lower frontier
   --------+----------------
      22   |  22 22
      21   |  21 21
      12   |  12 12
      11   |  11 11
      00   |  00 00



Domains for "_cos" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_cos"
Evaluated at size       2 using    2 evals live "_cos"

Function "_cos" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Function "_pi" is a constant point 1 in domain 
    {0 1}


Domains for "_sin" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_sin"
Evaluated at size       2 using    2 evals live "_sin"

Function "_sin" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_z" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_z"
Evaluated at size       4 using    4 evals live "_z"

Function "_z" has input domains:
   1) {0 1} (free "j")
   2) {0 1} (free "n")
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_root" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_root"
Evaluated at size       4 using    4 evals live "_root"

Function "_root" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {00 11 12 21 22}

   Output  |  Lower frontier
   --------+----------------
      22   |  1 1
      21   |  
      12   |  
      11   |  0 0
      00   |  



Domains for "_merge" are
       2   [Two]
       5   [Lift1 [Two,Two]]
       9   [Lift1 [Lift2 [Two],Two]]
      17   [Lift1 [Lift2 [Two],Lift2 [Two]]]

Evaluated at size       2 using    4 evals live "_merge"
Evaluated at size       2 using    4 evals live "_merge"
Evaluated at size       2 using    4 evals safe "_merge"
Evaluated at size       5 using    5 evals live "_merge"
Evaluated at size       5 using    5 evals live "_merge"
Evaluated at size       5 using    5 evals safe "_merge"
Evaluated at size       9 using    3 evals live "_merge"
Evaluated at size       9 using    2 evals live "_merge"
Evaluated at size       9 using    1 evals safe "_merge"
Evaluated at size       9 using    0 evals safe "_merge"
Evaluated at size      17 using    6 evals live "_merge"
Evaluated at size      17 using    4 evals live "_merge"
Evaluated at size      17 using    4 evals safe "_merge"

Function "_merge" has input domains:
   1) {00 11 12 13 14 21 22 23 24 31 32 33 34 41 42 43 44}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  44
       2   |  33
       1   |  21
       0   |  00



Domains for "_splitThenMerge" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals safe "_splitThenMerge"
Evaluated at size       2 using    4 evals live "_splitThenMerge"
Evaluated at size       4 using    4 evals safe "_splitThenMerge"
Evaluated at size       4 using    4 evals live "_splitThenMerge"

Function "_splitThenMerge" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  2
       2   |  
       1   |  
       0   |  0



Function "_loop)449" is a constant point 0 in domain 
    {0 1}


Domains for "_reverseAndBottom" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals safe "_reverseAndBottom"
Evaluated at size       2 using    4 evals live "_reverseAndBottom"
Evaluated at size       4 using    3 evals safe "_reverseAndBottom"
Evaluated at size       4 using    3 evals live "_reverseAndBottom"

Function "_reverseAndBottom" has input domains:
   1) {0 1 2 3}
   and output domain
      {00 13 14 23 24 33 34 43 44}

   Output  |  Lower frontier
   --------+----------------
      44   |  
      43   |  3
      34   |  
      33   |  2
      24   |  
      23   |  
      14   |  
      13   |  0
      00   |  



Function "_rabAbsCons" is a constant point 65 in domain 
    {00 15 16 25 26 35 36 45 46 55 56 65 66}


Domains for "_d4" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]
      16   [Lift2 [Two],Lift2 [Two]]

Evaluated at size       4 using    4 evals live "_d4"
Evaluated at size       4 using    4 evals live "_d4"
Evaluated at size       4 using    4 evals safe "_d4"
Evaluated at size       8 using    4 evals live "_d4"
Evaluated at size       8 using    1 evals live "_d4"
Evaluated at size       8 using    1 evals safe "_d4"
Evaluated at size      16 using    1 evals live "_d4"
Evaluated at size      16 using    1 evals safe "_d4"

Function "_d4" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 3 and 3 0
       0   |  0 0



Domains for "_d6" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]
      12   [Two,Lift2 [Lift2 [Two]]]
      24   [Lift2 [Two],Lift2 [Lift2 [Two]]]
      36   [Lift2 [Lift2 [Two]],Lift2 [Lift2 [Two]]]

Evaluated at size       4 using    4 evals live "_d6"
Evaluated at size       4 using    4 evals live "_d6"
Evaluated at size       4 using    4 evals safe "_d6"
Evaluated at size       8 using    0 evals live "_d6"
Evaluated at size       8 using    0 evals safe "_d6"
Evaluated at size      12 using    0 evals live "_d6"
Evaluated at size      12 using    0 evals safe "_d6"
Evaluated at size      24 using    4 evals live "_d6"
Evaluated at size      24 using    8 evals live "_d6"
Evaluated at size      24 using    1 evals live "_d6"
Evaluated at size      24 using    1 evals safe "_d6"
Evaluated at size      36 using    4 evals live "_d6"
Evaluated at size      36 using    1 evals live "_d6"
Evaluated at size      36 using    1 evals safe "_d6"

Function "_d6" has input domains:
   1) {0 1 2 3 4 5}
   2) {0 1 2 3 4 5}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 2 and 3 1 and 5 0
       0   |  0 0



Domains for "_d8" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]
      12   [Two,Lift2 [Lift2 [Two]]]
      16   [Two,Lift2 [Lift2 [Lift2 [Two]]]]
      32   [Lift2 [Two],Lift2 [Lift2 [Lift2 [Two]]]]
      48   [Lift2 [Lift2 [Two]],Lift2 [Lift2 [Lift2 [Two]]]]
      64   [Lift2 [Lift2 [Lift2 [Two]]],Lift2 [Lift2 [Lift2 [Two]]]]

Evaluated at size       4 using    4 evals live "_d8"
Evaluated at size       4 using    4 evals live "_d8"
Evaluated at size       4 using    4 evals safe "_d8"
Evaluated at size       8 using    0 evals live "_d8"
Evaluated at size       8 using    0 evals safe "_d8"
Evaluated at size      12 using    0 evals live "_d8"
Evaluated at size      12 using    0 evals safe "_d8"
Evaluated at size      16 using    0 evals live "_d8"
Evaluated at size      16 using    0 evals safe "_d8"
Evaluated at size      32 using    4 evals live "_d8"
Evaluated at size      32 using    9 evals live "_d8"
Evaluated at size      32 using    1 evals live "_d8"
Evaluated at size      32 using    1 evals safe "_d8"
Evaluated at size      48 using    4 evals live "_d8"
Evaluated at size      48 using    1 evals live "_d8"
Evaluated at size      48 using    1 evals safe "_d8"
Evaluated at size      64 using    1 evals live "_d8"
Evaluated at size      64 using    1 evals safe "_d8"

Function "_d8" has input domains:
   1) {0 1 2 3 4 5 6 7}
   2) {0 1 2 3 4 5 6 7}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 2 and 3 1 and 7 0
       0   |  0 0



Domains for "_d10" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]
      12   [Two,Lift2 [Lift2 [Two]]]
      16   [Two,Lift2 [Lift2 [Lift2 [Two]]]]
      20   [Two,Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]
      40   [Lift2 [Two],Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]
      60   [Lift2 [Lift2 [Two]],Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]
      80   [Lift2 [Lift2 [Lift2 [Two]]],Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]
     100   [Lift2 [Lift2 [Lift2 [Lift2 [Two]]]],Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]

Evaluated at size       4 using    4 evals live "_d10"
Evaluated at size       4 using    4 evals live "_d10"
Evaluated at size       4 using    4 evals safe "_d10"
Evaluated at size       8 using    0 evals live "_d10"
Evaluated at size       8 using    0 evals safe "_d10"
Evaluated at size      12 using    0 evals live "_d10"
Evaluated at size      12 using    0 evals safe "_d10"
Evaluated at size      16 using    0 evals live "_d10"
Evaluated at size      16 using    0 evals safe "_d10"
Evaluated at size      20 using    0 evals live "_d10"
Evaluated at size      20 using    0 evals safe "_d10"
Evaluated at size      40 using    4 evals live "_d10"
Evaluated at size      40 using    9 evals live "_d10"
Evaluated at size      40 using    1 evals live "_d10"
Evaluated at size      40 using    1 evals safe "_d10"
Evaluated at size      60 using    4 evals live "_d10"
Evaluated at size      60 using    1 evals live "_d10"
Evaluated at size      60 using    1 evals safe "_d10"
Evaluated at size      80 using    1 evals live "_d10"
Evaluated at size      80 using    1 evals safe "_d10"
Evaluated at size     100 using    1 evals live "_d10"
Evaluated at size     100 using    1 evals safe "_d10"

Function "_d10" has input domains:
   1) {0 1 2 3 4 5 6 7 8 9}
   2) {0 1 2 3 4 5 6 7 8 9}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 2 and 3 1 and 9 0
       0   |  0 0



Domains for "_d12" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]
      12   [Two,Lift2 [Lift2 [Two]]]
      16   [Two,Lift2 [Lift2 [Lift2 [Two]]]]
      20   [Two,Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]
      24   [Two,Lift2 [Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]]
      48   [Lift2 [Two],Lift2 [Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]]
      72   [Lift2 [Lift2 [Two]],Lift2 [Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]]
      96   [Lift2 [Lift2 [Lift2 [Two]]],Lift2 [Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]]
     120   [Lift2 [Lift2 [Lift2 [Lift2 [Two]]]],Lift2 [Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]]
     144   [Lift2 [Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]],Lift2 [Lift2 [Lift2 [Lift2 [Lift2 [Two]]]]]]

Evaluated at size       4 using    4 evals live "_d12"
Evaluated at size       4 using    4 evals live "_d12"
Evaluated at size       4 using    4 evals safe "_d12"
Evaluated at size       8 using    0 evals live "_d12"
Evaluated at size       8 using    0 evals safe "_d12"
Evaluated at size      12 using    0 evals live "_d12"
Evaluated at size      12 using    0 evals safe "_d12"
Evaluated at size      16 using    0 evals live "_d12"
Evaluated at size      16 using    0 evals safe "_d12"
Evaluated at size      20 using    0 evals live "_d12"
Evaluated at size      20 using    0 evals safe "_d12"
Evaluated at size      24 using    0 evals live "_d12"
Evaluated at size      24 using    0 evals safe "_d12"
Evaluated at size      48 using    4 evals live "_d12"
Evaluated at size      48 using    9 evals live "_d12"
Evaluated at size      48 using    1 evals live "_d12"
Evaluated at size      48 using    1 evals safe "_d12"
Evaluated at size      72 using    4 evals live "_d12"
Evaluated at size      72 using    1 evals live "_d12"
Evaluated at size      72 using    1 evals safe "_d12"
Evaluated at size      96 using    1 evals live "_d12"
Evaluated at size      96 using    1 evals safe "_d12"
Evaluated at size     120 using    1 evals live "_d12"
Evaluated at size     120 using    1 evals safe "_d12"
Evaluated at size     144 using    1 evals live "_d12"
Evaluated at size     144 using    1 evals safe "_d12"

Function "_d12" has input domains:
   1) {0 1 2 3 4 5 6 7 8 9 : ;}
   2) {0 1 2 3 4 5 6 7 8 9 : ;}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 2 and 3 1 and ; 0
       0   |  0 0



Function "_boxid" is a higher-order constant (yuck) in domain

Lift1 [Func [Two] Two]

of value

Up1 [Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]]))]


Domains for "_use" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_use"
Evaluated at size       2 using    2 evals live "_use"

Function "_use" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_evenworse" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_evenworse"
Evaluated at size       2 using    2 evals live "_evenworse"

Function "_evenworse" has input domains:
   1) {0 1}
   and output domain
      {00 11 12 21 22}

   Output  |  Lower frontier
   --------+----------------
      22   |  0
      21   |  
      12   |  
      11   |  
      00   |  



Domains for "_addInt" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_addInt"
Evaluated at size       4 using    4 evals live "_addInt"

Function "_addInt" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_mulInt" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_mulInt"
Evaluated at size       4 using    4 evals live "_mulInt"

Function "_mulInt" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_negInt" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_negInt"
Evaluated at size       2 using    2 evals live "_negInt"

Function "_negInt" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_addBool" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_addBool"
Evaluated at size       4 using    4 evals live "_addBool"

Function "_addBool" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_mulBool" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_mulBool"
Evaluated at size       4 using    4 evals live "_mulBool"

Function "_mulBool" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_negBool" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_negBool"
Evaluated at size       2 using    2 evals live "_negBool"

Function "_negBool" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_add)509" are
       2   [Two]
       5   [Lift1 [Two,Two]]

Evaluated at size       2 using    2 evals safe "_add)509"
Evaluated at size       2 using    2 evals live "_add)509"
Evaluated at size       5 using    2 evals safe "_add)509"
Evaluated at size       5 using    2 evals live "_add)509"

Function "_add)509" has input domains:
   1) {00 11 12 21 22}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  11
       0   |  00



Domains for "_mul" are
       2   [Two]
       5   [Lift1 [Two,Two]]

Evaluated at size       2 using    2 evals safe "_mul"
Evaluated at size       2 using    2 evals live "_mul"
Evaluated at size       5 using    2 evals safe "_mul"
Evaluated at size       5 using    2 evals live "_mul"

Function "_mul" has input domains:
   1) {00 11 12 21 22}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  11
       0   |  00



Domains for "_neg" are
       2   [Two]
       5   [Lift1 [Two,Two]]

Evaluated at size       2 using    2 evals safe "_neg"
Evaluated at size       2 using    2 evals live "_neg"
Evaluated at size       5 using    3 evals safe "_neg"
Evaluated at size       5 using    3 evals live "_neg"

Function "_neg" has input domains:
   1) {00 11 12 21 22}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  12
       0   |  00



Function "_numDInt" is a higher-order constant (yuck) in domain

Lift1 [Func [Two,Two] Two,Func [Two] Two]

of value

Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [One,One]] [MkFrel [Zero,One],MkFrel [One,Zero]])),Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]]))]


Function "_numDBool" is a higher-order constant (yuck) in domain

Lift1 [Func [Two,Two] Two,Func [Two] Two]

of value

Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [One,One]] [MkFrel [Zero,One],MkFrel [One,Zero]])),Rep (RepTwo (Min1Max0 1 [MkFrel [One]] [MkFrel [Zero]]))]


Domains for "_squarePrime" are
       4   [Two,Two]
      10   [Lift1 [Two,Two],Two]
      26   [Lift1 [Func [Two,Two] Two,Two],Two]

Evaluated at size       4 using    4 evals safe "_squarePrime"
Evaluated at size       4 using    4 evals live "_squarePrime"
Evaluated at size      10 using    2 evals safe "_squarePrime"
Evaluated at size      10 using    2 evals live "_squarePrime"
Evaluated at size      26 using    0 evals safe "_squarePrime"
Evaluated at size      26 using    0 evals live "_squarePrime"

Function "_squarePrime" has input domains:
   1) Lift1 [Func [Two,Two] Two,Two]
   2) Two
   and output domain
      Two

with value:

RepTwo (Min1Max0 2 [MkFrel [Stop1,One],MkFrel [Up1 [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Zero],Zero]] [MkFrel [Stop1,Zero]])


Domains for "_squaresPrime" are
       4   [Two,Two]
      18   [Lift1 [Two,Two,Two],Two]
      81   [Lift1 [Two,Two,Two],Lift1 [Two,Two,Two]]
     189   [Lift1 [Two,Two,Lift1 [Two,Two]],Lift1 [Two,Two,Two]]
     477   [Lift1 [Two,Two,Lift1 [Func [Two,Two] Two,Two]],Lift1 [Two,Two,Two]]
    1179   [Lift1 [Lift1 [Two,Two],Two,Lift1 [Func [Two,Two] Two,Two]],Lift1 [Two,Two,Two]]
    3051   [Lift1 [Lift1 [Func [Two,Two] Two,Two],Two,Lift1 [Func [Two,Two] Two,Two]],Lift1 [Two,Two,Two]]
    7614   [Lift1 [Lift1 [Func [Two,Two] Two,Two],Lift1 [Two,Two],Lift1 [Func [Two,Two] Two,Two]],Lift1 [Two,Two,Two]]
   19782   [Lift1 [Lift1 [Func [Two,Two] Two,Two],Lift1 [Func [Two,Two] Two,Two],Lift1 [Func [Two,Two] Two,Two]],Lift1 [Two,Two,Two]]

Evaluated at size       4 using    6 evals safe "_squaresPrime"
Evaluated at size       4 using    6 evals live "_squaresPrime"
Evaluated at size      18 using    2 evals safe "_squaresPrime"
Evaluated at size      18 using    2 evals live "_squaresPrime"
Evaluated at size      81 using   18 evals safe "_squaresPrime"
Evaluated at size      81 using   18 evals live "_squaresPrime"
Evaluated at size     189 using    2 evals safe "_squaresPrime"
Evaluated at size     189 using    2 evals live "_squaresPrime"
Evaluated at size     477 using    0 evals safe "_squaresPrime"
Evaluated at size     477 using    0 evals live "_squaresPrime"
Evaluated at size    1179 using    2 evals safe "_squaresPrime"
Evaluated at size    1179 using    2 evals live "_squaresPrime"
Evaluated at size    3051 using    0 evals safe "_squaresPrime"
Evaluated at size    3051 using    0 evals live "_squaresPrime"
Evaluated at size    7614 using    2 evals safe "_squaresPrime"
Evaluated at size    7614 using    2 evals live "_squaresPrime"
Evaluated at size   19782 using    0 evals safe "_squaresPrime"
Evaluated at size   19782 using    0 evals live "_squaresPrime"

Function "_squaresPrime" has input domains:
   1) Lift1 [Lift1 [Func [Two,Two] Two,Two],Lift1 [Func [Two,Two] Two,Two],Lift1 [Func [Two,Two] Two,Two]]
   2) Lift1 [Two,Two,Two]
   and output domain
      Lift1 [Two,Two,Two]

with value:

Rep1 (Min1Max0 2 [MkFrel [Up1 [Stop1,Stop1,Stop1],Up1 [Zero,Zero,Zero]]] [MkFrel [Stop1,Up1 [One,One,One]],MkFrel [Up1 [Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One],Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One],Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One]],Stop1]]) [RepTwo (Min1Max0 2 [MkFrel [Up1 [Stop1,Stop1,Stop1],Up1 [One,Zero,Zero]],MkFrel [Up1 [Up1 [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Zero],Stop1,Stop1],Up1 [Zero,Zero,Zero]]] [MkFrel [Stop1,Up1 [One,One,One]],MkFrel [Up1 [Stop1,Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One],Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One]],Up1 [Zero,One,One]],MkFrel [Up1 [Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One],Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One],Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One]],Stop1]]),RepTwo (Min1Max0 2 [MkFrel [Up1 [Stop1,Stop1,Stop1],Up1 [Zero,One,Zero]],MkFrel [Up1 [Stop1,Up1 [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Zero],Stop1],Up1 [Zero,Zero,Zero]]] [MkFrel [Stop1,Up1 [One,One,One]],MkFrel [Up1 [Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One],Stop1,Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One]],Up1 [One,Zero,One]],MkFrel [Up1 [Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One],Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One],Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One]],Stop1]]),RepTwo (Min1Max0 2 [MkFrel [Up1 [Stop1,Stop1,Stop1],Up1 [Zero,Zero,One]],MkFrel [Up1 [Stop1,Stop1,Up1 [Rep (RepTwo (Min1Max0 2 [] [MkFrel [One,One]])),Zero]],Up1 [Zero,Zero,Zero]]] [MkFrel [Stop1,Up1 [One,One,One]],MkFrel [Up1 [Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One],Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One],Stop1],Up1 [One,One,Zero]],MkFrel [Up1 [Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One],Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One],Up1 [Rep (RepTwo (Min1Max0 2 [MkFrel [Zero,Zero]] [])),One]],Stop1]])]


Domains for "_divide_conq" are
       8   [Two,Two,Two]
      80   [Two,Func [Two,Two,Two] Two,Two]
     120   [Func [Two] Two,Func [Two,Two,Two] Two,Two]
     200   [Func [Lift2 [Two]] Two,Func [Two,Two,Two] Two,Two]
     400   [Func [Lift2 [Two]] Two,Func [Two,Two,Two] Two,Lift2 [Two]]

Evaluated at size       8 using    7 evals live "_divide_conq"
Evaluated at size       8 using    7 evals live "_divide_conq"
Evaluated at size       8 using    7 evals safe "_divide_conq"
Evaluated at size      80 using    5 evals live "_divide_conq"
Evaluated at size      80 using    1 evals live "_divide_conq"
Evaluated at size      80 using    1 evals safe "_divide_conq"
Evaluated at size     120 using    2 evals live "_divide_conq"
Evaluated at size     120 using    0 evals live "_divide_conq"
Evaluated at size     120 using    0 evals safe "_divide_conq"
Evaluated at size     200 using    0 evals live "_divide_conq"
Evaluated at size     200 using    0 evals safe "_divide_conq"
Evaluated at size     400 using   24 evals live "_divide_conq"
Evaluated at size     400 using    2 evals live "_divide_conq"
Evaluated at size     400 using    2 evals safe "_divide_conq"

Function "_divide_conq" has input domains:
   1) Func [Lift2 [Two]] Two
   2) Func [Two,Two,Two] Two
   3) Lift2 [Two]
   and output domain
      Two

with value:

RepTwo (Min1Max0 3 [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [UpUp2 [One]]])),Rep (RepTwo (Min1Max0 3 [MkFrel [One,Zero,Zero]] [MkFrel [Zero,One,One]])),Up2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [UpUp2 [One]]] [MkFrel [UpUp2 [Zero]]])),Rep (RepTwo (Min1Max0 3 [] [MkFrel [One,One,One]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [UpUp2 [One]]] [MkFrel [UpUp2 [Zero]]])),Rep (RepTwo (Min1Max0 3 [MkFrel [Zero,One,One]] [MkFrel [One,Zero,One],MkFrel [One,One,Zero]])),UpUp2 [Zero]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [UpUp2 [One]]] [MkFrel [UpUp2 [Zero]]])),Rep (RepTwo (Min1Max0 3 [MkFrel [One,Zero,One]] [MkFrel [Zero,One,One],MkFrel [One,One,Zero]])),Up2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [UpUp2 [One]]] [MkFrel [UpUp2 [Zero]]])),Rep (RepTwo (Min1Max0 3 [MkFrel [One,One,Zero]] [MkFrel [Zero,One,One],MkFrel [One,Zero,One]])),Up2]] [MkFrel [Rep (RepTwo (Min1Max0 1 [] [MkFrel [UpUp2 [One]]])),Rep (RepTwo (Min1Max0 3 [MkFrel [Zero,Zero,One],MkFrel [Zero,One,Zero]] [MkFrel [One,Zero,Zero]])),UpUp2 [One]],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Stop2]] [])),Rep (RepTwo (Min1Max0 3 [MkFrel [Zero,Zero,Zero]] [])),Stop2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Stop2]] [])),Rep (RepTwo (Min1Max0 3 [MkFrel [Zero,One,One]] [MkFrel [One,Zero,One],MkFrel [One,One,Zero]])),Up2],MkFrel [Rep (RepTwo (Min1Max0 1 [MkFrel [Stop2]] [])),Rep (RepTwo (Min1Max0 3 [MkFrel [One,One,One]] [MkFrel [Zero,One,One],MkFrel [One,Zero,One],MkFrel [One,One,Zero]])),UpUp2 [Zero]]])


Domains for "_t_base_fn" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_t_base_fn"
Evaluated at size       2 using    2 evals live "_t_base_fn"

Function "_t_base_fn" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0
       0   |  



Domains for "_t_merge_fn" are
       8   [Two,Two,Two]

Evaluated at size       8 using    5 evals safe "_t_merge_fn"
Evaluated at size       8 using    5 evals live "_t_merge_fn"

Function "_t_merge_fn" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1 1
       0   |  0 0 0



Domains for "_treeSum" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals safe "_treeSum"
Evaluated at size       2 using    2 evals live "_treeSum"
Evaluated at size       4 using    1 evals safe "_treeSum"
Evaluated at size       4 using    1 evals live "_treeSum"

Function "_treeSum" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Domains for "_m_base_fn" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_m_base_fn"
Evaluated at size       2 using    2 evals live "_m_base_fn"

Function "_m_base_fn" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_m_merge_fn" are
       8   [Two,Two,Two]
      16   [Two,Lift2 [Two],Two]
      32   [Two,Lift2 [Two],Lift2 [Two]]

Evaluated at size       8 using    8 evals safe "_m_merge_fn"
Evaluated at size       8 using    8 evals live "_m_merge_fn"
Evaluated at size      16 using    4 evals safe "_m_merge_fn"
Evaluated at size      16 using    4 evals live "_m_merge_fn"
Evaluated at size      32 using    7 evals safe "_m_merge_fn"
Evaluated at size      32 using    7 evals live "_m_merge_fn"

Function "_m_merge_fn" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   3) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  1 3 3
       2   |  0 2 2
       1   |  0 0 0
       0   |  



Domains for "_mirror" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals safe "_mirror"
Evaluated at size       2 using    4 evals live "_mirror"
Evaluated at size       4 using    2 evals safe "_mirror"
Evaluated at size       4 using    2 evals live "_mirror"

Function "_mirror" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  1
       0   |  0



Domains for "_f2" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals live "_f2"
Evaluated at size       4 using    4 evals live "_f2"
Evaluated at size       4 using    4 evals safe "_f2"

Function "_f2" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_f3" are
       8   [Two,Two,Two]

Evaluated at size       8 using    5 evals live "_f3"
Evaluated at size       8 using    5 evals live "_f3"
Evaluated at size       8 using    5 evals safe "_f3"

Function "_f3" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1 0
       0   |  0 0 0



Domains for "_f4" are
      16   [Two,Two,Two,Two]

Evaluated at size      16 using    8 evals live "_f4"
Evaluated at size      16 using   11 evals live "_f4"
Evaluated at size      16 using   11 evals live "_f4"
Evaluated at size      16 using   11 evals safe "_f4"

Function "_f4" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1 1 and 1 1 0 0
       0   |  0 0 0 0



Domains for "_f5" are
      32   [Two,Two,Two,Two,Two]

Evaluated at size      32 using    8 evals live "_f5"
Evaluated at size      32 using   15 evals live "_f5"
Evaluated at size      32 using   15 evals live "_f5"
Evaluated at size      32 using   15 evals safe "_f5"

Function "_f5" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 0 1 1 and 1 1 0 0 0
       0   |  0 0 0 0 0



Domains for "_f6" are
      64   [Two,Two,Two,Two,Two,Two]

Evaluated at size      64 using   14 evals live "_f6"
Evaluated at size      64 using   20 evals live "_f6"
Evaluated at size      64 using   20 evals live "_f6"
Evaluated at size      64 using   20 evals safe "_f6"

Function "_f6" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 0 0 1 1 and 1 1 0 0 0 0
       0   |  0 0 0 0 0 0



Domains for "_f7" are
     128   [Two,Two,Two,Two,Two,Two,Two]

Evaluated at size     128 using   10 evals live "_f7"
Evaluated at size     128 using   20 evals live "_f7"
Evaluated at size     128 using   20 evals live "_f7"
Evaluated at size     128 using   20 evals safe "_f7"

Function "_f7" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 0 0 0 1 1 and 1 1 0 0 0 0 0
       0   |  0 0 0 0 0 0 0



Domains for "_p2" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_p2"
Evaluated at size       4 using    4 evals live "_p2"

Function "_p2" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0
       0   |  0 0



Domains for "_p3" are
       8   [Two,Two,Two]

Evaluated at size       8 using    6 evals safe "_p3"
Evaluated at size       8 using    6 evals live "_p3"

Function "_p3" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1
       0   |  0 0 0



Domains for "_p4" are
      16   [Two,Two,Two,Two]

Evaluated at size      16 using   10 evals safe "_p4"
Evaluated at size      16 using   10 evals live "_p4"

Function "_p4" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1 0
       0   |  0 0 0 0



Domains for "_p5" are
      32   [Two,Two,Two,Two,Two]

Evaluated at size      32 using   11 evals safe "_p5"
Evaluated at size      32 using   11 evals live "_p5"

Function "_p5" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1 0 1
       0   |  0 0 0 0 0



Domains for "_p6" are
      64   [Two,Two,Two,Two,Two,Two]

Evaluated at size      64 using    7 evals safe "_p6"
Evaluated at size      64 using    7 evals live "_p6"

Function "_p6" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1 0 1 0
       0   |  0 0 0 0 0 0



Domains for "_p7" are
     128   [Two,Two,Two,Two,Two,Two,Two]

Evaluated at size     128 using   14 evals safe "_p7"
Evaluated at size     128 using   14 evals live "_p7"

Function "_p7" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1 0 1 0 1
       0   |  0 0 0 0 0 0 0



Domains for "_p8" are
     256   [Two,Two,Two,Two,Two,Two,Two,Two]

Evaluated at size     256 using   20 evals safe "_p8"
Evaluated at size     256 using   20 evals live "_p8"

Function "_p8" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   8) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1 0 1 0 1 0
       0   |  0 0 0 0 0 0 0 0



Domains for "_p9" are
     512   [Two,Two,Two,Two,Two,Two,Two,Two,Two]

Evaluated at size     512 using   23 evals safe "_p9"
Evaluated at size     512 using   23 evals live "_p9"

Function "_p9" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   8) {0 1}
   9) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1 0 1 0 1 0 1
       0   |  0 0 0 0 0 0 0 0 0



Domains for "_p10" are
    1024   [Two,Two,Two,Two,Two,Two,Two,Two,Two,Two]

Evaluated at size    1024 using   32 evals safe "_p10"
Evaluated at size    1024 using   32 evals live "_p10"

Function "_p10" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   8) {0 1}
   9) {0 1}
  10) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1 0 1 0 1 0 1 0
       0   |  0 0 0 0 0 0 0 0 0 0



Domains for "_p11" are
    2048   [Two,Two,Two,Two,Two,Two,Two,Two,Two,Two,Two]

Evaluated at size    2048 using   33 evals safe "_p11"
Evaluated at size    2048 using   33 evals live "_p11"

Function "_p11" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   8) {0 1}
   9) {0 1}
  10) {0 1}
  11) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1 0 1 0 1 0 1 0 1
       0   |  0 0 0 0 0 0 0 0 0 0 0



Domains for "_p12" are
    4096   [Two,Two,Two,Two,Two,Two,Two,Two,Two,Two,Two,Two]

Evaluated at size    4096 using   26 evals safe "_p12"
Evaluated at size    4096 using   26 evals live "_p12"

Function "_p12" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   8) {0 1}
   9) {0 1}
  10) {0 1}
  11) {0 1}
  12) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 0 1 0 1 0 1 0 1 0 1 0
       0   |  0 0 0 0 0 0 0 0 0 0 0 0



Domains for "_s2" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals safe "_s2"
Evaluated at size       4 using    4 evals live "_s2"

Function "_s2" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_s4" are
      16   [Two,Two,Two,Two]

Evaluated at size      16 using    6 evals safe "_s4"
Evaluated at size      16 using    6 evals live "_s4"

Function "_s4" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1 1 1
       0   |  0 0 0 0



Domains for "_s6" are
      64   [Two,Two,Two,Two,Two,Two]

Evaluated at size      64 using    8 evals safe "_s6"
Evaluated at size      64 using    8 evals live "_s6"

Function "_s6" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1 1 1 1 1
       0   |  0 0 0 0 0 0



Domains for "_s8" are
     256   [Two,Two,Two,Two,Two,Two,Two,Two]

Evaluated at size     256 using   10 evals safe "_s8"
Evaluated at size     256 using   10 evals live "_s8"

Function "_s8" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   8) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1 1 1 1 1 1 1
       0   |  0 0 0 0 0 0 0 0



Domains for "_s10" are
    1024   [Two,Two,Two,Two,Two,Two,Two,Two,Two,Two]

Evaluated at size    1024 using   12 evals safe "_s10"
Evaluated at size    1024 using   12 evals live "_s10"

Function "_s10" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   8) {0 1}
   9) {0 1}
  10) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1 1 1 1 1 1 1 1 1
       0   |  0 0 0 0 0 0 0 0 0 0



Domains for "_s12" are
    4096   [Two,Two,Two,Two,Two,Two,Two,Two,Two,Two,Two,Two]

Evaluated at size    4096 using   14 evals safe "_s12"
Evaluated at size    4096 using   14 evals live "_s12"

Function "_s12" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   8) {0 1}
   9) {0 1}
  10) {0 1}
  11) {0 1}
  12) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1 1 1 1 1 1 1 1 1 1 1
       0   |  0 0 0 0 0 0 0 0 0 0 0 0



Domains for "_l2" are
       4   [Two,Two]

Evaluated at size       4 using    2 evals safe "_l2"
Evaluated at size       4 using    2 evals live "_l2"

Function "_l2" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 0
       0   |  



Domains for "_l4" are
      16   [Two,Two,Two,Two]

Evaluated at size      16 using    2 evals safe "_l4"
Evaluated at size      16 using    2 evals live "_l4"

Function "_l4" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 0 0 0
       0   |  



Domains for "_l6" are
      64   [Two,Two,Two,Two,Two,Two]

Evaluated at size      64 using    2 evals safe "_l6"
Evaluated at size      64 using    2 evals live "_l6"

Function "_l6" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 0 0 0 0 0
       0   |  



Domains for "_l8" are
     256   [Two,Two,Two,Two,Two,Two,Two,Two]

Evaluated at size     256 using    2 evals safe "_l8"
Evaluated at size     256 using    2 evals live "_l8"

Function "_l8" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   8) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 0 0 0 0 0 0 0
       0   |  



Domains for "_l9" are
     512   [Two,Two,Two,Two,Two,Two,Two,Two,Two]

Evaluated at size     512 using    2 evals safe "_l9"
Evaluated at size     512 using    2 evals live "_l9"

Function "_l9" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   8) {0 1}
   9) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 0 0 0 0 0 0 0 0
       0   |  



Domains for "_l10" are
    1024   [Two,Two,Two,Two,Two,Two,Two,Two,Two,Two]

Evaluated at size    1024 using    2 evals safe "_l10"
Evaluated at size    1024 using    2 evals live "_l10"

Function "_l10" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   8) {0 1}
   9) {0 1}
  10) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 0 0 0 0 0 0 0 0 0
       0   |  



Domains for "_l12" are
    4096   [Two,Two,Two,Two,Two,Two,Two,Two,Two,Two,Two,Two]

Evaluated at size    4096 using    2 evals safe "_l12"
Evaluated at size    4096 using    2 evals live "_l12"

Function "_l12" has input domains:
   1) {0 1}
   2) {0 1}
   3) {0 1}
   4) {0 1}
   5) {0 1}
   6) {0 1}
   7) {0 1}
   8) {0 1}
   9) {0 1}
  10) {0 1}
  11) {0 1}
  12) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  0 0 0 0 0 0 0 0 0 0 0 0
       0   |  



Function "_bottomAny" is a constant point 0 in domain 
    {0 1}


Domains for "_bigs" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_bigs"
Evaluated at size       4 using    6 evals live "_bigs"
Evaluated at size       4 using    6 evals safe "_bigs"
Evaluated at size       8 using    5 evals live "_bigs"
Evaluated at size       8 using    3 evals live "_bigs"
Evaluated at size       8 using    3 evals safe "_bigs"

Function "_bigs" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  0 3
       2   |  
       1   |  1 1
       0   |  0 0



Domains for "_smalls" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_smalls"
Evaluated at size       4 using    6 evals live "_smalls"
Evaluated at size       4 using    6 evals safe "_smalls"
Evaluated at size       8 using    5 evals live "_smalls"
Evaluated at size       8 using    3 evals live "_smalls"
Evaluated at size       8 using    3 evals safe "_smalls"

Function "_smalls" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  0 3
       2   |  
       1   |  1 1
       0   |  0 0



Domains for "_qsort" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals live "_qsort"
Evaluated at size       2 using    4 evals live "_qsort"
Evaluated at size       2 using    4 evals safe "_qsort"
Evaluated at size       4 using    3 evals live "_qsort"
Evaluated at size       4 using    3 evals live "_qsort"
Evaluated at size       4 using    3 evals safe "_qsort"

Function "_qsort" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  
       0   |  0



Function "_topInt" is a constant point 1 in domain 
    {0 1}


Domains for "_domainHeight" are
       2   [Two]
       3   [Lift1 [Two]]

Evaluated at size       2 using    2 evals live "_domainHeight"
Evaluated at size       2 using    2 evals live "_domainHeight"
Evaluated at size       2 using    2 evals safe "_domainHeight"
Evaluated at size       3 using    1 evals live "_domainHeight"
Evaluated at size       3 using    1 evals safe "_domainHeight"

Function "_domainHeight" has input domains:
   1) {0 1 2}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  2
       0   |  0



Domains for "_workingHours" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_workingHours"
Evaluated at size       2 using    2 evals live "_workingHours"

Function "_workingHours" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_incHead" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals safe "_incHead"
Evaluated at size       2 using    4 evals live "_incHead"
Evaluated at size       4 using    2 evals safe "_incHead"
Evaluated at size       4 using    2 evals live "_incHead"

Function "_incHead" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  1
       0   |  0



Domains for "_tricky" are
       4   [Two,Two]

Evaluated at size       4 using    4 evals live "_tricky"
Evaluated at size       4 using    4 evals live "_tricky"
Evaluated at size       4 using    4 evals safe "_tricky"

Function "_tricky" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_rev)816" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals live "_rev)816"
Evaluated at size       2 using    4 evals live "_rev)816"
Evaluated at size       2 using    4 evals safe "_rev)816"
Evaluated at size       4 using    3 evals live "_rev)816"
Evaluated at size       4 using    3 evals live "_rev)816"
Evaluated at size       4 using    3 evals safe "_rev)816"

Function "_rev)816" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  
       0   |  0



Domains for "_first" are
       2   [Two]
       5   [Lift1 [Two,Two]]

Evaluated at size       2 using    2 evals safe "_first"
Evaluated at size       2 using    2 evals live "_first"
Evaluated at size       5 using    2 evals safe "_first"
Evaluated at size       5 using    2 evals live "_first"

Function "_first" has input domains:
   1) {00 11 12 21 22}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  21
       0   |  00



Domains for "_second" are
       2   [Two]
       5   [Lift1 [Two,Two]]

Evaluated at size       2 using    2 evals safe "_second"
Evaluated at size       2 using    2 evals live "_second"
Evaluated at size       5 using    3 evals safe "_second"
Evaluated at size       5 using    3 evals live "_second"

Function "_second" has input domains:
   1) {00 11 12 21 22}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  12
       0   |  00



Domains for "_sumt" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals live "_sumt"
Evaluated at size       2 using    2 evals live "_sumt"
Evaluated at size       2 using    2 evals safe "_sumt"
Evaluated at size       4 using    1 evals live "_sumt"
Evaluated at size       4 using    1 evals safe "_sumt"

Function "_sumt" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Domains for "_aLookupDef" are
       8   [Two,Two,Two]
      24   [Lift2 [Two,Two],Two,Two]

Evaluated at size       8 using    6 evals live "_aLookupDef"
Evaluated at size       8 using    6 evals live "_aLookupDef"
Evaluated at size       8 using    6 evals safe "_aLookupDef"
Evaluated at size      24 using    5 evals live "_aLookupDef"
Evaluated at size      24 using    2 evals live "_aLookupDef"
Evaluated at size      24 using    2 evals safe "_aLookupDef"

Function "_aLookupDef" has input domains:
   1) {00 11 22 23 32 33}
   2) {0 1}
   3) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  11 1 0 and 33 0 1
       0   |  00 0 0



Domains for "_aDomain" are
       2   [Two]
       6   [Lift2 [Two,Two]]

Evaluated at size       2 using    4 evals live "_aDomain"
Evaluated at size       2 using    4 evals live "_aDomain"
Evaluated at size       2 using    4 evals safe "_aDomain"
Evaluated at size       6 using    4 evals live "_aDomain"
Evaluated at size       6 using    2 evals live "_aDomain"
Evaluated at size       6 using    2 evals safe "_aDomain"

Function "_aDomain" has input domains:
   1) {00 11 22 23 32 33}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  32
       2   |  22
       1   |  11
       0   |  00



Domains for "_aInverse" are
       2   [Two]
       6   [Lift2 [Two,Two]]

Evaluated at size       2 using    4 evals live "_aInverse"
Evaluated at size       2 using    4 evals live "_aInverse"
Evaluated at size       2 using    4 evals safe "_aInverse"
Evaluated at size       6 using    4 evals live "_aInverse"
Evaluated at size       6 using    3 evals live "_aInverse"
Evaluated at size       6 using    3 evals safe "_aInverse"

Function "_aInverse" has input domains:
   1) {00 11 22 23 32 33}
   and output domain
      {00 11 22 23 32 33}

   Output  |  Lower frontier
   --------+----------------
      33   |  33
      32   |  23
      23   |  32
      22   |  22
      11   |  11
      00   |  00



Domains for "_flatten" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals live "_flatten"
Evaluated at size       2 using    4 evals live "_flatten"
Evaluated at size       2 using    4 evals safe "_flatten"
Evaluated at size       4 using    2 evals live "_flatten"
Evaluated at size       4 using    2 evals live "_flatten"
Evaluated at size       4 using    2 evals safe "_flatten"

Function "_flatten" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  1
       0   |  0



Domains for "_insert" are
       4   [Two,Two]
       8   [Two,Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_insert"
Evaluated at size       4 using    6 evals live "_insert"
Evaluated at size       4 using    6 evals safe "_insert"
Evaluated at size       8 using    5 evals live "_insert"
Evaluated at size       8 using    4 evals live "_insert"
Evaluated at size       8 using    4 evals safe "_insert"

Function "_insert" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  1 3
       2   |  0 3 and 1 2
       1   |  1 1
       0   |  0 0



Domains for "_ltt" are
       4   [Two,Two]
       8   [Lift2 [Two],Two]
      16   [Lift2 [Two],Lift2 [Two]]

Evaluated at size       4 using    8 evals live "_ltt"
Evaluated at size       4 using    8 evals live "_ltt"
Evaluated at size       4 using    8 evals safe "_ltt"
Evaluated at size       8 using    2 evals live "_ltt"
Evaluated at size       8 using    2 evals live "_ltt"
Evaluated at size       8 using    2 evals safe "_ltt"
Evaluated at size      16 using    6 evals live "_ltt"
Evaluated at size      16 using    5 evals live "_ltt"
Evaluated at size      16 using    5 evals safe "_ltt"

Function "_ltt" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3 3
       2   |  2 3 and 3 2
       1   |  1 3
       0   |  0 0



Domains for "_listToTree" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals safe "_listToTree"
Evaluated at size       2 using    4 evals live "_listToTree"
Evaluated at size       4 using    3 evals safe "_listToTree"
Evaluated at size       4 using    3 evals live "_listToTree"

Function "_listToTree" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  
       0   |  0



Domains for "_nodups" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals safe "_nodups"
Evaluated at size       2 using    4 evals live "_nodups"
Evaluated at size       4 using    3 evals safe "_nodups"
Evaluated at size       4 using    3 evals live "_nodups"

Function "_nodups" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  
       0   |  0



