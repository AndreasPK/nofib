> lit   :: Eq a => a -> Parser a a
> parse_args :: [String] -> IO ()
> parse_args (regexp: files) =
>	hPutStr stderr ("Usage: " ++ progName ++ " regexp\n")
> mkTable pairs anys ends final (NFAChar c n:ns) = mkTable ((c,n):pairs) anys ends final ns
> mkTable pairs anys ends final (NFAAny n:ns) = mkTable pairs (n:anys) ends final ns
> mkTable pairs anys ends final (NFATable pairs' anys' ends' final':ns) = mkTable (pairs'++pairs) (anys'++anys) (ends'++ends) (final' || final) ns
> mkTable pairs anys ends final (NFAEnd n:ns) = mkTable pairs anys (n:ends) final ns
> mkTable pairs anys ends final (NFAFinal:ns) = mkTable pairs anys ends True ns
> nnAtom :: Parser Char NFAproducer
> nnExtAtom :: Parser Char NFAproducer
> nnFactor :: Parser Char NFAproducer
> nnRegexp :: Parser Char NFAproducer
precondition: there are no epsilon cycles!
> epsClosure (NFAEps ns:ns') = epsClosure (ns++ns')
> epsClosure (n:ns) = n:epsClosure ns
> acceptor :: NFAproducer -> String -> Bool
> nfaRun :: [NFANode] -> String -> Bool
> nfaRun ns (c:cs) = nfaRun (nfaStep ns c) cs
